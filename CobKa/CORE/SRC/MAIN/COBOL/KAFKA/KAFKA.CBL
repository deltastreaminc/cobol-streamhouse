IDENTIFICATION DIVISION.
PROGRAM-ID. KAFKA.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    COPY "JOPT-SIMPLE"
    COPY "KAFKA-CONFIG"
    COPY "KAFKA-RAFT-SERVER"
    COPY "KAFKA-SERVER"
    COPY "KAFKA-UTILS-IMPLICITS"
    COPY "KAFKA-UTILS-LOGGING"
    COPY "KAFKA-COMMON-UTILS"
    COPY "KAFKA-COMMON-OPERATING-SYSTEM"
    COPY "KAFKA-COMMON-TIME"
    COPY "KAFKA-COMMON-UTILS"
    COPY "KAFKA-SERVER-UTIL-COMMAND-LINE-UTILS".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-PROPS USAGE IS OBJECT.
01 WS-SERVER USAGE IS OBJECT.
01 WS-OPTION-PARSER USAGE IS OBJECT.
01 WS-OPTIONS USAGE IS OBJECT.
01 WS-PROPERTIES USAGE IS OBJECT.

PROCEDURE DIVISION.
GET-PROPS-FROM-ARGS.
    MOVE FUNCTION NEW "JOPT-SIMPLE-OPTION-PARSER"(FALSE) TO WS-OPTION-PARSER.
    MOVE FUNCTION NEW "JOPT-SIMPLE-OPTION-SPEC"("override", "Optional property that should override values set in server.properties file")
        TO WS-PROPS.
    INVOKE WS-OPTION-PARSER "accepts" USING WS-PROPS.
    MOVE FUNCTION NEW "JOPT-SIMPLE-OPTION-SPEC"("version", "Print version information and exit.")
        TO WS-PROPS.
    INVOKE WS-OPTION-PARSER "accepts" USING WS-PROPS.

    IF FUNCTION LENGTH(FUNCTION CURRENT-PROGRAM-ARGUMENTS) IS EQUAL TO 0 OR
       FUNCTION CONTAINS(FUNCTION CURRENT-PROGRAM-ARGUMENTS, "--help")
    THEN
        PERFORM COMMAND-LINE-UTILS-PRINT-USAGE-AND-EXIT
    END-IF.

    IF FUNCTION CONTAINS(FUNCTION CURRENT-PROGRAM-ARGUMENTS, "--version")
    THEN
        PERFORM COMMAND-LINE-UTILS-PRINT-VERSION-AND-EXIT
    END-IF.

    MOVE FUNCTION LOAD-PROPS(FUNCTION CURRENT-PROGRAM-ARGUMENTS(1)) TO WS-PROPERTIES.

    IF FUNCTION LENGTH(FUNCTION CURRENT-PROGRAM-ARGUMENTS) > 1
    THEN
        MOVE FUNCTION PARSE(WS-OPTION-PARSER, FUNCTION CURRENT-PROGRAM-ARGUMENTS(2:)) TO WS-OPTIONS.
        IF FUNCTION SIZE(FUNCTION NON-OPTION-ARGUMENTS(WS-OPTIONS)) > 0
        THEN
            PERFORM COMMAND-LINE-UTILS-PRINT-USAGE-AND-EXIT
                USING "Found non argument parameters: " FUNCTION TO-ARRAY(FUNCTION NON-OPTION-ARGUMENTS(WS-OPTIONS))
        END-IF.
        MOVE FUNCTION PARSE-KEY-VALUE-ARGS(FUNCTION VALUES-OF(WS-OPTIONS, WS-PROPS)) TO WS-PROPERTIES.
    END-IF.
    MOVE WS-PROPERTIES TO WS-PROPS.

BUILD-SERVER.
    MOVE FUNCTION KAFKA-CONFIG-FROM-PROPS(WS-PROPS, FALSE) TO WS-SERVER.
    MOVE FUNCTION NEW "KAFKA-RAFT-SERVER"(WS-SERVER, FUNCTION TIME-SYSTEM) TO WS-SERVER.

MAIN.
    PERFORM GET-PROPS-FROM-ARGS.
    PERFORM BUILD-SERVER.

    PERFORM REGISTRATION-OF-SIGNAL-HANDLER.
    PERFORM ATTACH-SHUTDOWN-HOOK.

    PERFORM SERVER-STARTUP.
    PERFORM SERVER-AWAIT-SHUTDOWN.
    PERFORM EXIT-PROGRAM USING 0.

REGISTRATION-OF-SIGNAL-HANDLER.
    IF NOT FUNCTION IS-WINDOWS AND NOT FUNCTION IS-IBM-JDK
    THEN
        MOVE FUNCTION NEW "LOGGING-SIGNAL-HANDLER" TO WS-PROPS.
        INVOKE WS-PROPS "register".
    END-IF.

ATTACH-SHUTDOWN-HOOK.
    MOVE "kafka-shutdown-hook" TO WS-PROPS.
    MOVE FUNCTION NEW "EXIT-SHUTDOWN-HOOK"(WS-PROPS) TO WS-PROPS.
    INVOKE EXIT "addShutdownHook" USING WS-PROPS.

SERVER-STARTUP.
    INVOKE WS-SERVER "startup".

SERVER-AWAIT-SHUTDOWN.
    INVOKE WS-SERVER "awaitShutdown".

COMMAND-LINE-UTILS-PRINT-USAGE-AND-EXIT.
    PERFORM COMMAND-LINE-UTILS-PRINT-USAGE-AND-EXIT-INTERNAL
        USING "USAGE: java [options] %s server.properties [--override property=value]*"
              FUNCTION GET-CANONICAL-NAME(THIS-CLASS).

COMMAND-LINE-UTILS-PRINT-VERSION-AND-EXIT.
    PERFORM COMMAND-LINE-UTILS-PRINT-VERSION-AND-EXIT-INTERNAL.

COMMAND-LINE-UTILS-PRINT-USAGE-AND-EXIT-INTERNAL.
    CALL "COMMAND-LINE-UTILS" USING "printUsageAndExit" USING WS-OPTION-PARSER, FUNCTION FORMAT-STRING(ARGUMENT-1, ARGUMENT-2).
    PERFORM EXIT-PROGRAM USING 1.

COMMAND-LINE-UTILS-PRINT-VERSION-AND-EXIT-INTERNAL.
    CALL "COMMAND-LINE-UTILS" USING "printVersionAndExit".
    PERFORM EXIT-PROGRAM USING 0.

EXIT-PROGRAM.
    CALL "EXIT" USING ARGUMENT-1.

END PROGRAM KAFKA.