IDENTIFICATION DIVISION.
PROGRAM-ID. POOL.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    FUNCTION CONCURRENTHASHMAP OF "java.util.concurrent.ConcurrentHashMap".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 POOL-INSTANCE.
    02 POOL-MAP USAGE IS OBJECT REFERENCE CONCURRENTHASHMAP.
    02 VALUE-FACTORY USAGE IS OBJECT REFERENCE PROCEDURE.

PROCEDURE DIVISION.
MAIN-LOGIC.

    *> Constructor
    PERFORM INITIALIZE-POOL.

    *> Put operation
    PERFORM PUT USING SOME-KEY, SOME-VALUE.
    PERFORM PUT-ALL USING SOME-MAP.
    PERFORM PUT-IF-NOT-EXISTS USING SOME-KEY, SOME-VALUE.

    *> Get and maybe put operation
    PERFORM GET-AND-MAYBE-PUT USING SOME-KEY.
    PERFORM GET-AND-MAYBE-PUT-WITH-FACTORY USING SOME-KEY, SOME-VALUE-FACTORY.

    *> Other operations
    IF CONTAINS-KEY(SOME-KEY) THEN
        CONTINUE
    END-IF.

    MOVE POOL-MAP:GET(SOME-KEY) TO SOME-VALUE.
    MOVE POOL-MAP:REMOVE(SOME-KEY) TO SOME-VALUE.
    IF POOL-MAP:REMOVE(SOME-KEY, SOME-VALUE) THEN
        CONTINUE
    END-IF.

    PERFORM REMOVE-ALL USING SOME-KEYS.

    MOVE POOL-MAP:KEYSET TO SOME-KEYS.
    MOVE POOL-MAP:VALUES TO SOME-VALUES.

    PERFORM CLEAR-POOL.

    PERFORM FOREACH-ENTRY USING SOME-PROCEDURE.

    MOVE POOL-MAP:SIZE TO POOL-SIZE.

    PERFORM ITERATE-POOL.

INITIALIZE-POOL.
    MOVE NEW CONCURRENTHASHMAP TO POOL-MAP.
    IF VALUE-FACTORY IS NOT NULL THEN
        MOVE VALUE-FACTORY TO POOL-INSTANCE:VALUE-FACTORY
    END-IF.

PUT.
    MOVE POOL-MAP:PUT(KEY, VALUE) TO RESULT.

PUT-ALL.
    CALL POOL-MAP:PUTALL USING MAP.

PUT-IF-NOT-EXISTS.
    MOVE POOL-MAP:PUTIFABSENT(KEY, VALUE) TO RESULT.

GET-AND-MAYBE-PUT.
    IF VALUE-FACTORY IS NULL THEN
        RAISE KAFKAEXCEPTION "Empty value factory in pool."
    END-IF.
    PERFORM GET-AND-MAYBE-PUT-WITH-FACTORY USING KEY, VALUE-FACTORY(KEY).

GET-AND-MAYBE-PUT-WITH-FACTORY.
    MOVE POOL-MAP:COMPUTEIFABSENT(KEY, VALUE-FACTORY) TO RESULT.

CONTAINS-KEY.
    MOVE POOL-MAP:CONTAINSKEY(KEY) TO RESULT.

GET.
    MOVE POOL-MAP:GET(KEY) TO RESULT.

REMOVE.
    MOVE POOL-MAP:REMOVE(KEY) TO RESULT.

REMOVE-WITH-VALUE.
    MOVE POOL-MAP:REMOVE(KEY, VALUE) TO RESULT.

REMOVE-ALL.
    CALL POOL-MAP:KEYSET:REMOVEALL USING KEYS.

CLEAR-POOL.
    CALL POOL-MAP:CLEAR.

FOREACH-ENTRY.
    CALL POOL-MAP:FOREACH USING PROCEDURE.

ITERATE-POOL.
    MOVE NEW ITERATOR(POOL-MAP:ENTRYSET) TO ITERATOR.
    PERFORM UNTIL ITERATOR:HASNEXT IS FALSE
        MOVE ITERATOR:NEXT TO ENTRY
        MOVE ENTRY:GETKEY TO KEY
        MOVE ENTRY:GETVALUE TO VALUE
        PERFORM PROCESS-ENTRY USING KEY, VALUE
    END-PERFORM.

PROCESS-ENTRY.
    *> User-defined logic to process each entry

POOL-SIZE PICTURE 9(9) USAGE IS COMPUTATIONAL.
ITERATOR USAGE IS OBJECT REFERENCE ITERATOR.
ENTRY USAGE IS OBJECT REFERENCE ENTRY.
KEY USAGE IS OBJECT.
VALUE USAGE IS OBJECT.
SOME-KEY USAGE IS OBJECT.
SOME-VALUE USAGE IS OBJECT.
SOME-MAP USAGE IS OBJECT REFERENCE JAVA-MAP.
SOME-KEYS USAGE IS OBJECT REFERENCE JAVA-SET.
SOME-VALUES USAGE IS OBJECT REFERENCE JAVA-COLLECTION.
SOME-PROCEDURE USAGE IS OBJECT REFERENCE PROCEDURE.
SOME-VALUE-FACTORY USAGE IS OBJECT REFERENCE PROCEDURE.
RESULT USAGE IS OBJECT.

END PROGRAM POOL.