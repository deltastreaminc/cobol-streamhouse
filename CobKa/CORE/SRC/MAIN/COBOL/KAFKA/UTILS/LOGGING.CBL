IDENTIFICATION DIVISION.
PROGRAM-ID. LOG4J-CONTROLLER-REGISTRATION.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    COPY LOGGING-CONTROLLER.
    COPY CORE-UTILS.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 LOGGER PIC X(30) VALUE "LOG4J-CONTROLLER-REGISTRATION".
01 LOGGING-MBEAN USAGE OBJECT REFERENCE LOGGING-CONTROLLER.
01 TYPE-ATTR PIC X(15) VALUE "kafka.Log4jController".

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    PERFORM REGISTER-MBEAN.
    GOBACK.

REGISTER-MBEAN.
    MOVE LOGGING-MBEAN TO POINTER.
    PERFORM CORE-UTILS-REGISTER-MBEAN
        USING LOGGING-MBEAN, "kafka:type=kafka.Log4jController".
    EVALUATE RESULT
        WHEN 0
            PERFORM LOG-INFO
                USING "Registered `kafka:type={}` MBean", TYPE-ATTR
        WHEN OTHER
            PERFORM LOG-WARN
                USING "Couldn't register `kafka:type={}` MBean", TYPE-ATTR
    END-EVALUATE.

LOG-INFO.
    CALL "logger.info" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), MESSAGE.

LOG-WARN.
    CALL "logger.warn" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), MESSAGE, EXCEPTION-OBJ.

MSG-WITH-LOG-IDENT.
    IF LOG-IDENT IS NOT NULL
        MOVE LOG-IDENT TO RESULT
    END-IF
    MOVE MESSAGE TO RESULT.

IDENTIFICATION DIVISION.
PROGRAM-ID. LOGGING.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 FATAL-MARKER PIC X(10) VALUE "FATAL".

LINKAGE SECTION.
01 LOGGER PIC X(30).
01 LOG-IDENT PIC X(50).
01 MESSAGE PIC X(100).
01 EXCEPTION-OBJ USAGE POINTER.

PROCEDURE DIVISION USING LOGGER, LOG-IDENT, MESSAGE, EXCEPTION-OBJ.

MAIN-PROCEDURE.
    EVALUATE TRUE
        WHEN LOG-TRACE-ENABLED
            PERFORM LOG-TRACE
        WHEN LOG-DEBUG-ENABLED
            PERFORM LOG-DEBUG
        WHEN LOG-INFO-ENABLED
            PERFORM LOG-INFO
        WHEN LOG-WARN-ENABLED
            PERFORM LOG-WARN
        WHEN LOG-ERROR-ENABLED
            PERFORM LOG-ERROR
        WHEN LOG-FATAL-ENABLED
            PERFORM LOG-FATAL
    END-EVALUATE.
    GOBACK.

LOG-TRACE.
    CALL "logger.trace" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), MESSAGE.
    CALL "logger.trace" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), EXCEPTION-OBJ.

LOG-DEBUG.
    CALL "logger.debug" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), MESSAGE.
    CALL "logger.debug" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), EXCEPTION-OBJ.

LOG-INFO.
    CALL "logger.info" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), MESSAGE.
    CALL "logger.info" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), EXCEPTION-OBJ.

LOG-WARN.
    CALL "logger.warn" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), MESSAGE.
    CALL "logger.warn" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), EXCEPTION-OBJ.

LOG-ERROR.
    CALL "logger.error" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), MESSAGE.
    CALL "logger.error" USING LOGGER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), EXCEPTION-OBJ.

LOG-FATAL.
    CALL "logger.error" USING LOGGER, FATAL-MARKER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), MESSAGE.
    CALL "logger.error" USING LOGGER, FATAL-MARKER, FUNCTION-POINTER(MSG-WITH-LOG-IDENT), EXCEPTION-OBJ.

LOG-TRACE-ENABLED.
    CALL "logger.isTraceEnabled" USING LOGGER GIVING RESULT.
    IF RESULT = 1
        MOVE 1 TO RETURN-CODE
    ELSE
        MOVE 0 TO RETURN-CODE
    END-IF.

LOG-DEBUG-ENABLED.
    CALL "logger.isDebugEnabled" USING LOGGER GIVING RESULT.
    IF RESULT = 1
        MOVE 1 TO RETURN-CODE
    ELSE
        MOVE 0 TO RETURN-CODE
    END-IF.

MSG-WITH-LOG-IDENT.
    IF LOG-IDENT IS NOT NULL
        MOVE LOG-IDENT TO RESULT
    END-IF
    MOVE MESSAGE TO RESULT.