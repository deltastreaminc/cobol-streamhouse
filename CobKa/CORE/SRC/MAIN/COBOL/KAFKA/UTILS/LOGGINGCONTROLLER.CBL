IDENTIFICATION DIVISION.
PROGRAM-ID. LOG-CONTROLLER.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    COPY KAFKA-UTILS.

DATA DIVISION.
WORKING-STORAGE SECTION.
77 WS-LOGGER-NAME PIC X(256) VALUE SPACES.
77 WS-LOG-LEVEL PIC X(256) VALUE SPACES.
77 WS-RETURN-CODE PIC S9(9) COMP-5 VALUE 0.
77 WS-LOGGER-MAP-SIZE PIC 9(9) COMP-5 VALUE 0.
01 WS-LOGGER-MAP.
    05 WS-LOGGER-ENTRY OCCURS 100 TIMES.
       10 WS-LOGGER-NAME-X PIC X(256).
       10 WS-LOG-LEVEL-X PIC X(256).

PROCEDURE DIVISION.

LOG-CONTROLLER-MAIN.
    PERFORM INIT-LOGGING
    PERFORM PROCESS-LOGGING
    GOBACK.

INIT-LOGGING.
    CALL "SET-UP-LOGGING" USING GRAPH-UTILS-LOG4J-CORE
                          RETURNING WS-RETURN-CODE.
    IF WS-RETURN-CODE NOT = 0
        PERFORM LOG-INIT-EXCEPTION
    END-IF.
    CALL "GET-LOGGERS" USING WS-LOGGER-MAP-SIZE
                           WS-LOGGER-MAP
                       RETURNING WS-RETURN-CODE.
    IF WS-RETURN-CODE NOT = 0
        PERFORM LOG-GET-LOGGERS-EXCEPTION
    END-IF.

PROCESS-LOGGING.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > WS-LOGGER-MAP-SIZE
        MOVE WS-LOGGER-NAME-X(I) TO WS-LOGGER-NAME
        MOVE WS-LOG-LEVEL-X(I) TO WS-LOG-LEVEL
        CALL "SET-LOG-LEVEL" USING WS-LOGGER-NAME
                                 WS-LOG-LEVEL
                             RETURNING WS-RETURN-CODE
        IF WS-RETURN-CODE NOT = 0
            PERFORM LOG-SET-LOG-LEVEL-EXCEPTION
        END-IF
    END-PERFORM.

LOG-INIT-EXCEPTION.
    CALL "LOG-ERROR" USING "Failed to initialize logging controller"
                            GRAPH-UTILS-EXC.

LOG-GET-LOGGERS-EXCEPTION.
    CALL "LOG-ERROR" USING "Failed to get loggers"
                            GRAPH-UTILS-EXC.

LOG-SET-LOG-LEVEL-EXCEPTION.
    CALL "LOG-ERROR" USING "Failed to set log level"
                            GRAPH-UTILS-EXC.

STOP RUN.