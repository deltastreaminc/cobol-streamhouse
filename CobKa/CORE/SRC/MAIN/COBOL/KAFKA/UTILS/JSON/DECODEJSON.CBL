IDENTIFICATION DIVISION.
PROGRAM-ID. KAFKA-UTILS-JSON.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    COPY JACKSON-DATABIND.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-DECODE-BOOLEAN.
    05 WS-BOOLEAN-VALUE PIC X.
01 WS-DECODE-DOUBLE.
    05 WS-DOUBLE-VALUE PIC 9(18)V9(9).
01 WS-DECODE-INT.
    05 WS-INT-VALUE PIC S9(9) COMP.
01 WS-DECODE-LONG.
    05 WS-LONG-VALUE PIC S9(18) COMP.
01 WS-DECODE-STRING.
    05 WS-STRING-VALUE PIC X(256).

PROCEDURE DIVISION.

DECODE-BOOLEAN.
    IF JSON-NODE IS BOOLEAN
        MOVE JSON-NODE-BOOLEAN-VALUE TO WS-BOOLEAN-VALUE
        MOVE WS-BOOLEAN-VALUE TO RETURN-VALUE
    ELSE
        MOVE "Expected `Boolean` value, received " TO ERROR-MESSAGE
        MOVE JSON-NODE TO ERROR-MESSAGE-APPEND
        MOVE ERROR-MESSAGE TO RETURN-VALUE
    END-IF.

DECODE-DOUBLE.
    IF JSON-NODE IS DOUBLE OR JSON-NODE IS LONG OR JSON-NODE IS INT
        MOVE JSON-NODE-DOUBLE-VALUE TO WS-DOUBLE-VALUE
        MOVE WS-DOUBLE-VALUE TO RETURN-VALUE
    ELSE
        MOVE "Expected `Double` value, received " TO ERROR-MESSAGE
        MOVE JSON-NODE TO ERROR-MESSAGE-APPEND
        MOVE ERROR-MESSAGE TO RETURN-VALUE
    END-IF.

DECODE-INT.
    IF JSON-NODE IS INT
        MOVE JSON-NODE-INT-VALUE TO WS-INT-VALUE
        MOVE WS-INT-VALUE TO RETURN-VALUE
    ELSE
        MOVE "Expected `Int` value, received " TO ERROR-MESSAGE
        MOVE JSON-NODE TO ERROR-MESSAGE-APPEND
        MOVE ERROR-MESSAGE TO RETURN-VALUE
    END-IF.

DECODE-LONG.
    IF JSON-NODE IS LONG OR JSON-NODE IS INT
        MOVE JSON-NODE-LONG-VALUE TO WS-LONG-VALUE
        MOVE WS-LONG-VALUE TO RETURN-VALUE
    ELSE
        MOVE "Expected `Long` value, received " TO ERROR-MESSAGE
        MOVE JSON-NODE TO ERROR-MESSAGE-APPEND
        MOVE ERROR-MESSAGE TO RETURN-VALUE
    END-IF.

DECODE-STRING.
    IF JSON-NODE IS TEXTUAL
        MOVE JSON-NODE-TEXT-VALUE TO WS-STRING-VALUE
        MOVE WS-STRING-VALUE TO RETURN-VALUE
    ELSE
        MOVE "Expected `String` value, received " TO ERROR-MESSAGE
        MOVE JSON-NODE TO ERROR-MESSAGE-APPEND
        MOVE ERROR-MESSAGE TO RETURN-VALUE
    END-IF.

DECODE-OPTION.
    IF JSON-NODE IS NULL
        MOVE SPACE TO RETURN-VALUE
    ELSE
        PERFORM DECODE-CHILD
        MOVE RETURN-VALUE TO RETURN-OPTION-VALUE
    END-IF.

DECODE-SEQUENCE.
    IF JSON-NODE IS ARRAY
        PERFORM DECODE-ITERATOR
    ELSE
        MOVE "Expected JSON array, received " TO ERROR-MESSAGE
        MOVE JSON-NODE TO ERROR-MESSAGE-APPEND
        MOVE ERROR-MESSAGE TO RETURN-VALUE
    END-IF.

DECODE-MAP.
    IF JSON-NODE IS OBJECT
        PERFORM DECODE-ITERATOR
    ELSE
        MOVE "Expected JSON object, received " TO ERROR-MESSAGE
        MOVE JSON-NODE TO ERROR-MESSAGE-APPEND
        MOVE ERROR-MESSAGE TO RETURN-VALUE
    END-IF.

DECODE-ITERATOR.
    INITIALIZE RETURN-VALUE
    MOVE 1 TO RETURN-ITEM-INDEX
    PERFORM UNTIL JSON-ITERATOR-HAS-NEXT = FALSE
        PERFORM DECODE-CHILD
        MOVE RETURN-VALUE TO RETURN-ITEM(RETURN-ITEM-INDEX)
        ADD 1 TO RETURN-ITEM-INDEX
        PERFORM NEXT-JSON-ITERATOR-ITEM
    END-PERFORM
    MOVE RETURN-ITEM-INDEX TO RETURN-ITEM-COUNT
    MOVE RETURN-ITEM TO RETURN-VALUE.

DECODE-CHILD.
    CASE JSON-NODE-TYPE
        WHEN 'BOOLEAN'
            PERFORM DECODE-BOOLEAN
        WHEN 'DOUBLE'
            PERFORM DECODE-DOUBLE
        WHEN 'INT'
            PERFORM DECODE-INT
        WHEN 'LONG'
            PERFORM DECODE-LONG
        WHEN 'STRING'
            PERFORM DECODE-STRING
        WHEN 'OBJECT'
            PERFORM DECODE-MAP
        WHEN 'ARRAY'
            PERFORM DECODE-SEQUENCE
        WHEN 'NULL'
            PERFORM DECODE-OPTION
        WHEN OTHER
            MOVE "Unsupported JSON type: " TO ERROR-MESSAGE
            MOVE JSON-NODE-TYPE TO ERROR-MESSAGE-APPEND
            MOVE ERROR-MESSAGE TO RETURN-VALUE
            MOVE 1 TO RETURN-STATUS
    END-CASE.

GOBACK.