IDENTIFICATION DIVISION.
PROGRAM-ID. GROUP-COORDINATOR.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 GROUP-METADATA-TOPIC-NAME PIC X(20) VALUE 'GROUP-METADATA-TOPIC'.
01 GROUP-METADATA-PARTITION-COUNT PIC 9(9) COMP.
01 GROUP-CONFIG.
   05 GROUP-MIN-SESSION-TIMEOUT-MS PIC 9(9) COMP.
   05 GROUP-MAX-SESSION-TIMEOUT-MS PIC 9(9) COMP.
   05 GROUP-MAX-SIZE PIC 9(9) COMP.
   05 GROUP-INITIAL-REBALANCE-DELAY-MS PIC 9(9) COMP.
01 OFFSET-CONFIG.
   05 OFFSET-METADATA-MAX-SIZE PIC 9(9) COMP.
   05 OFFSETS-LOAD-BUFFER-SIZE PIC 9(9) COMP.
   05 OFFSETS-RETENTION-MS PIC 9(9) COMP.
   05 OFFSETS-RETENTION-CHECK-INTERVAL-MS PIC 9(9) COMP.
   05 OFFSETS-TOPIC-PARTITIONS PIC 9(9) COMP.
   05 OFFSETS-TOPIC-SEGMENT-BYTES PIC 9(9) COMP.
   05 OFFSETS-TOPIC-REPLICATION-FACTOR PIC 9(9) COMP.
   05 OFFSET-TOPIC-COMPRESSION-TYPE PIC X(20).
   05 OFFSET-COMMIT-TIMEOUT-MS PIC 9(9) COMP.
01 BROKER-ID PIC 9(9) COMP.
01 GROUP-METADATA-MANAGER.
01 HEARTBEAT-PURGATORY.
01 REBALANCE-PURGATORY.
01 TIME.
01 METRICS.

PROCEDURE DIVISION.

    STARTUP.
        PERFORM STARTUP-LOGIC.
        SET IS-ACTIVE TO TRUE.

    SHUTDOWN.
        SET IS-ACTIVE TO FALSE.
        PERFORM SHUTDOWN-LOGIC.

    STARTUP-LOGIC.
        CALL "STARTUP" USING GROUP-METADATA-MANAGER, RETRIEVE-GROUP-METADATA-TOPIC-PARTITION-COUNT, ENABLE-METADATA-EXPIRATION.

    SHUTDOWN-LOGIC.
        CALL "SHUTDOWN" USING GROUP-METADATA-MANAGER.
        CALL "SHUTDOWN" USING HEARTBEAT-PURGATORY.
        CALL "SHUTDOWN" USING REBALANCE-PURGATORY.

    ACCEPT-JOINING-MEMBER.
        PERFORM VARYING MEMBER IN GROUP-MEMBERS
            WHEN MEMBER-STATE IS EMPTY OR DEAD
                RETURN TRUE
            WHEN MEMBER-STATE IS PREPARING-REBALANCE
                IF MEMBER-ID IS MEMBER OR GROUP-SIZE < GROUP-MAX-SIZE
                    RETURN TRUE
                ELSE
                    RETURN FALSE
            WHEN MEMBER-STATE IS COMPLETING-REBALANCE OR STABLE
                IF MEMBER-ID IS MEMBER OR GROUP-SIZE < GROUP-MAX-SIZE
                    RETURN TRUE
                ELSE
                    RETURN FALSE
        END-PERFORM.

    HANDLE-JOIN-GROUP.
        PERFORM VALIDATE-GROUP-STATUS.
        IF ERRORS IS NOT NONE
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(MEMBER-ID, ERRORS)
            RETURN
        END-IF.

        IF SESSION-TIMEOUT-MS < GROUP-MIN-SESSION-TIMEOUT-MS OR
           SESSION-TIMEOUT-MS > GROUP-MAX-SESSION-TIMEOUT-MS
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(MEMBER-ID, INVALID-SESSION-TIMEOUT)
        ELSE
            CALL "GET-OR-MAYBE-CREATE-GROUP" USING GROUP-ID, IS-UNKNOWN-MEMBER
                RETURNING GROUP
            IF GROUP IS NOTHING
                CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(UNKNOWN-MEMBER-ID, UNKNOWN-MEMBER-ID)
            ELSE
                PERFORM IN-GROUP-LOCK
                    IF NOT ACCEPT-JOINING-MEMBER(GROUP, MEMBER-ID)
                        CALL "REMOVE" USING GROUP, MEMBER-ID
                        CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(UNKNOWN-MEMBER-ID, GROUP-MAX-SIZE-REACHED)
                    ELSE IF IS-UNKNOWN-MEMBER
                        PERFORM DO-NEW-MEMBER-JOIN-GROUP
                    ELSE
                        PERFORM DO-CURRENT-MEMBER-JOIN-GROUP
                    END-IF
                    PERFORM ATTEMPT-COMPLETE-JOIN-GROUP
                END-PERFORM
            END-IF
        END-IF.

    DO-NEW-MEMBER-JOIN-GROUP.
        PERFORM VARYING WHEN GROUP-STATE IS DEAD
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(UNKNOWN-MEMBER-ID, COORDINATOR-NOT-AVAILABLE)
        WHEN NOT SUPPORTS-PROTOCOLS(GROUP, PROTOCOL-TYPE, MEMBER-PROTOCOLS)
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(UNKNOWN-MEMBER-ID, INCONSISTENT-GROUP-PROTOCOL)
        OTHER
            PERFORM GENERATE-MEMBER-ID USING CLIENT-ID, GROUP-INSTANCE-ID
                RETURNING NEW-MEMBER-ID
            IF GROUP-INSTANCE-ID IS PROVIDED
                PERFORM DO-STATIC-NEW-MEMBER-JOIN-GROUP
            ELSE
                PERFORM DO-DYNAMIC-NEW-MEMBER-JOIN-GROUP
            END-IF
        END-PERFORM.

    DO-STATIC-NEW-MEMBER-JOIN-GROUP.
        PERFORM VARYING WHEN GROUP-STATE IS DEAD
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(UNKNOWN-MEMBER-ID, COORDINATOR-NOT-AVAILABLE)
        WHEN CURRENT-STATIC-MEMBER-ID(GROUP-INSTANCE-ID) IS PROVIDED
            PERFORM UPDATE-STATIC-MEMBER-AND-REBALANCE
        OTHER
            PERFORM ADD-MEMBER-AND-REBALANCE
        END-PERFORM.

    DO-DYNAMIC-NEW-MEMBER-JOIN-GROUP.
        PERFORM VARYING WHEN GROUP-STATE IS DEAD
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(UNKNOWN-MEMBER-ID, COORDINATOR-NOT-AVAILABLE)
        WHEN REQUIRE-KNOWN-MEMBER-ID
            PERFORM ADD-PENDING-MEMBER
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(NEW-MEMBER-ID, MEMBER-ID-REQUIRED)
        OTHER
            PERFORM ADD-MEMBER-AND-REBALANCE
        END-PERFORM.

    DO-CURRENT-MEMBER-JOIN-GROUP.
        PERFORM VARYING WHEN GROUP-STATE IS DEAD
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(MEMBER-ID, COORDINATOR-NOT-AVAILABLE)
        WHEN NOT SUPPORTS-PROTOCOLS(GROUP, PROTOCOL-TYPE, MEMBER-PROTOCOLS)
            CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(MEMBER-ID, INCONSISTENT-GROUP-PROTOCOL)
        WHEN IS-PENDING-MEMBER(GROUP, MEMBER-ID)
            PERFORM ADD-MEMBER-AND-REBALANCE
        OTHER
            PERFORM VALIDATE-CURRENT-MEMBER(GROUP, MEMBER-ID, GROUP-INSTANCE-ID, "join-group")
                RETURNING MEMBER-ERROR
            IF MEMBER-ERROR IS PROVIDED
                CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(MEMBER-ID, MEMBER-ERROR)
            ELSE
                PERFORM VARYING WHEN GROUP-STATE IS PREPARING-REBALANCE
                    PERFORM UPDATE-MEMBER-AND-REBALANCE
                WHEN GROUP-STATE IS COMPLETING-REBALANCE
                    IF MEMBER-MATCHES-PROTOCOLS(GROUP, MEMBER-ID)
                        CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(
                            MEMBERS = IF IS-LEADER(GROUP, MEMBER-ID) THEN GROUP-MEMBER-METADATA ELSE EMPTY,
                            MEMBER-ID = MEMBER-ID,
                            GENERATION-ID = GROUP-GENERATION-ID,
                            PROTOCOL-TYPE = GROUP-PROTOCOL-TYPE,
                            PROTOCOL-NAME = GROUP-PROTOCOL-NAME,
                            LEADER-ID = GROUP-LEADER,
                            SKIP-ASSIGNMENT = FALSE,
                            ERROR = NONE)
                    ELSE
                        PERFORM UPDATE-MEMBER-AND-REBALANCE
                    END-IF
                WHEN GROUP-STATE IS STABLE
                    IF IS-LEADER(GROUP, MEMBER-ID)
                        PERFORM UPDATE-MEMBER-AND-REBALANCE
                    ELSE IF NOT MEMBER-MATCHES-PROTOCOLS(GROUP, MEMBER-ID)
                        PERFORM UPDATE-MEMBER-AND-REBALANCE
                    ELSE
                        CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(
                            MEMBERS = EMPTY,
                            MEMBER-ID = MEMBER-ID,
                            GENERATION-ID = GROUP-GENERATION-ID,
                            PROTOCOL-TYPE = GROUP-PROTOCOL-TYPE,
                            PROTOCOL-NAME = GROUP-PROTOCOL-NAME,
                            LEADER-ID = GROUP-LEADER,
                            SKIP-ASSIGNMENT = FALSE,
                            ERROR = NONE)
                    END-IF
                WHEN GROUP-STATE IS EMPTY OR DEAD
                    WARN "Attempt to add rejoining member %s of group %s in unexpected group state %s" (MEMBER-ID, GROUP-ID, GROUP-STATE)
                    CALL "RESPONSE-CALLBACK" USING JOIN-GROUP-RESULT(MEMBER-ID, UNKNOWN-MEMBER-ID)
                END-PERFORM
            END-IF
        END-PERFORM.

    HANDLE-SYNC-GROUP.
        PERFORM VALIDATE-GROUP-STATUS USING GROUP-ID, SYNC-GROUP
            RETURNING ERRORS
        IF ERRORS IS PROVIDED
            IF ERRORS IS COORDINATOR-LOAD-IN-PROGRESS
                CALL "RESPONSE-CALLBACK" USING SYNC-GROUP-RESULT(REBALANCE-IN-PROGRESS)
            ELSE
                CALL "RESPONSE-CALLBACK" USING SYNC-GROUP-RESULT(ERRORS)
            END-IF
        ELSE
            CALL "GET-GROUP" USING GROUP-ID
                RETURNING GROUP
            IF GROUP IS NOTHING
                CALL "RESPONSE-CALLBACK" USING SYNC-GROUP-RESULT(UNKNOWN-MEMBER-ID)
            ELSE
                PERFORM DO-SYNC-GROUP
            END-IF
        END-IF.

    DO-SYNC-GROUP.
        PERFORM VALIDATE-SYNC-GROUP USING GROUP, GENERATION-ID, MEMBER-ID, PROTOCOL-TYPE, PROTOCOL-NAME, GROUP-INSTANCE-ID
            RETURNING VALIDATION-ERROR
        IF VALIDATION-ERROR IS PROVIDED
            CALL "RESPONSE-CALLBACK" USING SYNC-GROUP-RESULT(VALIDATION-ERROR)
        ELSE
            PERFORM IN-GROUP-LOCK
                PERFORM VARYING WHEN GROUP-STATE IS EMPTY
                    CALL "RESPONSE-CALLBACK" USING SYNC-GROUP-RESULT(UNKNOWN-MEMBER-ID)
                WHEN GROUP-STATE IS PREPARING-REBALANCE
                    CALL "RESPONSE-CALLBACK" USING SYNC-GROUP-RESULT(REBALANCE-IN-PROGRESS)
                WHEN GROUP-STATE IS COMPLETING-REBALANCE
                    PERFORM SET-AWAIT-SYNC-CALLBACK USING GROUP, MEMBER-ID, RESPONSE-CALLBACK
                    IF IS-LEADER(GROUP, MEMBER-ID)
                        PERFORM STORE-GROUP-ASSIGNMENT
                    END-IF
                WHEN GROUP-STATE IS STABLE
                    PERFORM REMOVE-PENDING-SYNC-MEMBER USING GROUP, MEMBER-ID
                    PERFORM COMPLETE-AND-SCHEDULE-NEXT-HEARTBEAT-EXPIRATION USING GROUP, GROUP-GET(MEMBER-ID)
                    CALL "RESPONSE-CALLBACK" USING SYNC-GROUP-RESULT(
                        GROUP-PROTOCOL-TYPE,
                        GROUP-PROTOCOL-NAME,
                        GROUP-GET(MEMBER-ID)-ASSIGNMENT,
                        NONE)
                WHEN GROUP-STATE IS DEAD
                    THROW EXCEPTION "Reached unexpected condition for Dead group %s" (GROUP-ID)
                END-PERFORM
            END-PERFORM
        END-IF.

    HANDLE-LEAVE-GROUP.
        PERFORM VALIDATE-GROUP-STATUS USING GROUP-ID, LEAVE-GROUP
            RETURNING ERRORS
        IF ERRORS IS PROVIDED
            CALL "RESPONSE-CALLBACK" USING LEAVE-GROUP-RESULT(ERRORS, EMPTY)
        ELSE
            CALL "GET-GROUP" USING GROUP-ID
                RETURNING GROUP
            IF GROUP IS NOTHING
                CALL "RESPONSE-CALLBACK" USING LEAVE-GROUP-RESULT(NONE, LEAVING-MEMBERS.MAP(MEMBER-ID, UNKNOWN-MEMBER-ID))
            ELSE
                PERFORM IN-GROUP-LOCK
                    IF GROUP-STATE IS DEAD
                        CALL "RESPONSE-CALLBACK" USING LEAVE-GROUP-RESULT(COORDINATOR-NOT-AVAILABLE, EMPTY)
                    ELSE
                        PERFORM VARYING MEMBER IN LEAVING-MEMBERS
                            PERFORM REMOVE-MEMBER-FROM-GROUP USING GROUP, MEMBER
                        END-PERFORM
                        CALL "RESPONSE-CALLBACK" USING LEAVE-GROUP-RESULT(NONE, LEAVING-MEMBERS.MAP(MEMBER-RESPONSE))
                    END-IF
                END-PERFORM
            END-IF
        END-IF.

    HANDLE-DELETE-GROUPS.
        PERFORM VARYING GROUP-ID IN GROUP-IDS
            PERFORM VALIDATE-GROUP-STATUS USING GROUP-ID, DELETE-GROUPS
                RETURNING ERRORS
            IF ERRORS IS PROVIDED
                SET GROUP-ERRORS(GROUP-ID) TO ERRORS
            ELSE
                CALL "GET-GROUP" USING GROUP-ID
                    RETURNING GROUP
                IF GROUP IS NOTHING
                    IF GROUP-NOT-EXISTS(GROUP-ID)
                        SET GROUP-ERRORS(GROUP-ID) TO GROUP-ID-NOT-FOUND
                    ELSE
                        SET GROUP-ERRORS(GROUP-ID) TO NOT-COORDINATOR
                    END-IF
                ELSE
                    PERFORM IN-GROUP-LOCK
                        PERFORM VARYING WHEN GROUP-STATE IS DEAD
                            IF GROUP-NOT-EXISTS(GROUP-ID)
                                SET GROUP-ERRORS(GROUP-ID) TO GROUP-ID-NOT-FOUND
                            ELSE
                                SET GROUP-ERRORS(GROUP-ID) TO NOT-COORDINATOR
                            END-IF
                        WHEN GROUP-STATE IS EMPTY
                            PERFORM TRANSITION-TO(GROUP, DEAD)
                            APPEND GROUP TO GROUPS-ELIGIBLE-FOR-DELETION
                        WHEN GROUP-STATE IS STABLE OR PREPARING-REBALANCE OR COMPLETING-REBALANCE
                            SET GROUP-ERRORS(GROUP-ID) TO NON-EMPTY-GROUP
                        END-PERFORM
                    END-PERFORM
                END-IF
            END-IF
        END-PERFORM.
        IF GROUPS-ELIGIBLE-FOR-DELETION IS NOT EMPTY
            PERFORM CLEANUP-GROUP-METADATA USING GROUPS-ELIGIBLE-FOR-DELETION
                RETURNING OFFSETS-REMOVED
            PERFORM VARYING GROUP IN GROUPS-ELIGIBLE-FOR-DELETION
                SET GROUP-ERRORS(GROUP-ID) TO NONE
            END-PERFORM
            LOG "The following groups were deleted: %s. A total of %d offsets were removed." (GROUPS-ELIGIBLE-FOR-DELETION.MAP(GROUPID), OFFSETS-REMOVED)
        END-IF.
        RETURN GROUP-ERRORS.

    HANDLE-DELETE-OFFSETS.
        INITIALIZE GROUP-ERROR, PARTITION-ERRORS.
        PERFORM VALIDATE-GROUP-STATUS USING GROUP-ID, OFFSET-DELETE
            RETURNING ERRORS
        IF ERRORS IS PROVIDED
            SET GROUP-ERROR TO ERRORS