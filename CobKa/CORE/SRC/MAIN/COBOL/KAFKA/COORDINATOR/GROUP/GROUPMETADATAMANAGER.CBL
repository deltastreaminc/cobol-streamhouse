IDENTIFICATION DIVISION.
PROGRAM-ID. GROUP-METADATA-MANAGER.
AUTHOR. COBOL Expert.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
SOURCE-COMPUTER. IBM-370.
OBJECT-COMPUTER. IBM-370.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 BROKERID PIC 9(10) VALUE 0.
01 CONFIG-PARAMS.
   05 OFFSET-CONFIG.
      10 OFFSETS-TOPIC-COMPRESSION-TYPE PIC X(10).
      10 OFFSETS-COMMIT-TIMEOUT-MS PIC 9(10) VALUE 0.
      10 OFFSETS-RETENTION-CHECK-INTERVAL-MS PIC 9(10) VALUE 0.
      10 OFFSETS-RETENTION-MS PIC 9(10) VALUE 0.
      10 MAX-METADATA-SIZE PIC 9(10) VALUE 0.
   05 LOAD-BUFFER-SIZE PIC 9(10) VALUE 0.
01 REPLICA-MANAGER.
01 TIME.
01 METRICS.

01 COMPRESSION-TYPE PIC X(10).
01 GROUP-METADATA-CACHE.
   05 ENTRIES OCCURS 1 TO 9999 TIMES DEPENDING ON CACHE-SIZE.
      10 GROUPID PIC X(50).
      10 GROUP-METADATA.
         15 GROUPID PIC X(50).
         15 INITIAL-STATE PIC X(20).
         15 GENERATION-ID PIC 9(10).
         15 PROTOCOL-TYPE PIC X(10).
         15 PROTOCOL-NAME PIC X(50).
         15 LEADER-ID PIC X(50).
         15 CURRENT-STATE-TIMESTAMP PIC 9(18).
         15 MEMBER-COUNT PIC 9(10).
         15 MEMBER-METADATA OCCURS 1 TO 9999 TIMES DEPENDING ON MEMBER-COUNT.
            20 MEMBER-ID PIC X(50).
            20 GROUP-INSTANCE-ID PIC X(50).
            20 CLIENT-ID PIC X(50).
            20 CLIENT-HOST PIC X(50).
            20 SESSION-TIMEOUT-MS PIC 9(10).
            20 REBALANCE-TIMEOUT-MS PIC 9(10).
            20 SUBSCRIPTION PIC X(100).
            20 ASSIGNMENT PIC X(100).
01 PARTITION-LOCK.
01 LOADING-PARTITIONS PIC 9(10) OCCURS 1 TO 9999 TIMES DEPENDING ON PARTITION-COUNT.
01 OWNED-PARTITIONS PIC 9(10) OCCURS 1 TO 9999 TIMES DEPENDING ON PARTITION-COUNT.
01 SHUTTING-DOWN PIC 9(01) VALUE 0.
01 GROUP-METADATA-TOPIC-PARTITION-COUNT PIC 9(10) VALUE 0.
01 SCHEDULER.
01 OPEN-GROUPS-FOR-PRODUCER.
   05 PRODUCER-ID PIC 9(18) OCCURS 1 TO 9999 TIMES DEPENDING ON PRODUCER-COUNT.
   05 GROUPS PIC X(50) OCCURS 1 TO 9999 TIMES DEPENDING ON GROUP-COUNT.
01 EPOCH-FOR-PARTITION-ID.
   05 PARTITION-ID PIC 9(10) OCCURS 1 TO 9999 TIMES DEPENDING ON PARTITION-COUNT.
   05 EPOCH PIC 9(10) OCCURS 1 TO 9999 TIMES DEPENDING ON PARTITION-COUNT.
01 PARTITION-LOAD-SENSOR.
01 OFFSET-COMMITS-SENSOR.
01 OFFSET-EXPIRED-SENSOR.

PROCEDURE DIVISION.
    PERFORM STARTUP.
    PERFORM CURRENT-GROUPS.
    PERFORM IS-PARTITION-OWNED.
    PERFORM IS-PARTITION-LOADING.
    PERFORM PARTITION-FOR.
    PERFORM IS-GROUP-LOCAL.
    PERFORM IS-GROUP-LOADING.
    PERFORM IS-LOADING.
    PERFORM GROUP-NOT-EXISTS.
    PERFORM GET-GROUP.
    PERFORM GET-OR-MAYBE-CREATE-GROUP.
    PERFORM ADD-GROUP.
    PERFORM STORE-GROUP.
    PERFORM STORE-OFFSETS.
    PERFORM GET-OFFSETS.
    PERFORM SCHEDULE-LOAD-GROUP-AND-OFFSETS.
    PERFORM REMOVE-GROUPS-FOR-PARTITION.
    PERFORM SCHEDULE-HANDLE-TXN-COMPLETION.
    PERFORM CLEANUP-GROUP-METADATA.
    PERFORM SHUTDOWN.

    STOP RUN.

STARTUP.
    MOVE RETRIEVE-GROUP-METADATA-TOPIC-PARTITION-COUNT TO GROUP-METADATA-TOPIC-PARTITION-COUNT.
    CALL "STARTUP" USING RETRIEVE-GROUP-METADATA-TOPIC-PARTITION-COUNT, ENABLE-METADATA-EXPIRATION.
    
CURRENT-GROUPS.
    RETURN GROUP-METADATA-CACHE.

IS-PARTITION-OWNED.
    PERFORM INLOCK PARTITION-LOCK.
    SEARCH OWNED-PARTITIONS VARYING IDX
        WHEN PARTITION = PARTITION-ID
        MOVE 1 TO RETURN-CODE
        STOP.
    MOVE 0 TO RETURN-CODE.

IS-PARTITION-LOADING.
    PERFORM INLOCK PARTITION-LOCK.
    SEARCH LOADING-PARTITIONS VARYING IDX
        WHEN PARTITION = PARTITION-ID
        MOVE 1 TO RETURN-CODE
        STOP.
    MOVE 0 TO RETURN-CODE.

PARTITION-FOR.
    COMPUTE RETURN-CODE = FUNCTION ABS(HASH(GROUP-ID)) MOD GROUP-METADATA-TOPIC-PARTITION-COUNT.

IS-GROUP-LOCAL.
    CALL "PARTITION-FOR" USING GROUP-ID.
    PERFORM IS-PARTITION-OWNED.

IS-GROUP-LOADING.
    CALL "PARTITION-FOR" USING GROUP-ID.
    PERFORM IS-PARTITION-LOADING.

IS-LOADING.
    PERFORM INLOCK PARTITION-LOCK.
    SEARCH LOADING-PARTITIONS VARYING IDX
        WHEN PARTITION-COUNT > 0
        MOVE 1 TO RETURN-CODE
        STOP.
    MOVE 0 TO RETURN-CODE.

GROUP-NOT-EXISTS.
    PERFORM INLOCK PARTITION-LOCK.
    CALL "PARTITION-FOR" USING GROUP-ID.
    PERFORM IS-PARTITION-OWNED.
    IF RETURN-CODE = 1
        CALL "GET-GROUP" USING GROUP-ID.
        IF RETURN-CODE = 1
            PERFORM INLOCK ON GROUP
            IF GROUP.INITIAL-STATE = "Dead"
                MOVE 1 TO RETURN-CODE
            ELSE
                MOVE 0 TO RETURN-CODE
            END-IF
        ELSE
            MOVE 0 TO RETURN-CODE
        END-IF
    ELSE
        MOVE 0 TO RETURN-CODE
    END-IF.

GET-GROUP.
    MOVE GROUP-ID TO LOOKUP-KEY.
    SEARCH GROUP-METADATA-CACHE VARYING IDX
        WHEN GROUPID = LOOKUP-KEY
        MOVE ENTRY(IDX) TO RETURN-GROUP
        STOP.
    MOVE NULL TO RETURN-GROUP.

GET-OR-MAYBE-CREATE-GROUP.
    CALL "GET-GROUP" USING GROUP-ID.
    IF RETURN-GROUP = NULL AND CREATE-IF-NOT-EXIST = 1
        MOVE GROUP-ID TO NEW-GROUP.GROUPID.
        MOVE "Empty" TO NEW-GROUP.INITIAL-STATE.
        CALL "TIME" RETURNING NEW-GROUP.CURRENT-STATE-TIMESTAMP.
        PERFORM ADD-GROUP.
        MOVE NEW-GROUP TO RETURN-GROUP.
    END-IF.

ADD-GROUP.
    MOVE GROUP TO LOOKUP-KEY.
    SEARCH GROUP-METADATA-CACHE VARYING IDX
        WHEN GROUPID = LOOKUP-KEY AND ENTRY(IDX) = NULL
        MOVE GROUP TO ENTRY(IDX)
        MOVE ENTRY(IDX) TO RETURN-GROUP
        STOP.
    IF RETURN-GROUP = NULL
        MOVE GROUP TO RETURN-GROUP.

STORE-GROUP.
    CALL "PARTITION-FOR" USING GROUP-ID.
    IF ONLINE-PARTITION(RETURN-CODE) IS NOT NULL
        MOVE TIME-MILLISECONDS TO TIMESTAMP.
        MOVE GROUP-ID TO KEY.
        MOVE GROUP TO VALUE.
        PERFORM CREATE-RECORDS USING TIMESTAMP, KEY, VALUE.
        MOVE NEW-RECORDS TO GROUP-METADATA-RECORDS.
        MOVE GROUP.GENERATION-ID TO GENERATION-ID.
        PERFORM APPEND-FOR-GROUP USING GROUP, GROUP-METADATA-RECORDS, REQUEST-LOCAL, PUT-CACHE-CALLBACK.
    ELSE
        MOVE ERRORS-NOT-COORDINATOR TO RETURN-CODE.
    END-IF.

STORE-OFFSETS.
    PERFORM INLOCK ON GROUP.
    IF NOT GROUP.HAS-RECEIVED-CONSISTENT-OFFSET-COMMITS
        PERFORM LOG-WARNING.
    END-IF.
    PERFORM FILTER-OFFSET-METADATA.
    IF FILTERED-OFFSETS-EMPTY
        PERFORM COMPUTE-COMMIT-STATUS USING OFFSET-METADATA.
        CALL RESPONSE-CALLBACK USING COMMIT-STATUS.
        STOP RUN.
    END-IF.
    CALL "PARTITION-FOR" USING GROUP-ID.
    IF ONLINE-PARTITION(RETURN-CODE) IS NULL
        PERFORM COMPUTE-COMMIT-STATUS USING OFFSET-METADATA.
        CALL RESPONSE-CALLBACK USING COMMIT-STATUS.
        STOP RUN.
    END-IF.
    PERFORM GENERATE-OFFSET-RECORDS.
    PERFORM CREATE-PUT-CACHE-CALLBACK USING IS-TXN-OFFSET-COMMIT, GROUP, CONSUMER-ID, OFFSET-METADATA, FILTERED-OFFSETS, RESPONSE-CALLBACK, PRODUCER-ID, RECORDS.
    PERFORM APPEND-FOR-GROUP USING GROUP, RECORDS, REQUEST-LOCAL, PUT-CACHE-CALLBACK.

GET-OFFSETS.
    MOVE GROUP-ID TO LOOKUP-KEY.
    CALL "GET-GROUP" USING LOOKUP-KEY.
    IF RETURN-GROUP IS NULL
        PERFORM INITIALIZE-PARTITION-DATA VARYING TP IN TOPIC-PARTITIONS
            MOVE OFFSET-FETCH-RESPONSE-INVALID-OFFSET TO PARTITION-DATA.OFFSET
            MOVE OPTIONAL-EMPTY TO PARTITION-DATA.LEADER-EPOCH
            MOVE "" TO PARTITION-DATA.METADATA
            MOVE ERRORS-NONE TO PARTITION-DATA.ERROR
            RETURN PARTITION-DATA
        END-PERFORM.
    ELSE
        PERFORM INLOCK ON RETURN-GROUP.
        IF RETURN-GROUP.INITIAL-STATE = "Dead"
            PERFORM INITIALIZE-PARTITION-DATA VARYING TP IN TOPIC-PARTITIONS
                MOVE OFFSET-FETCH-RESPONSE-INVALID-OFFSET TO PARTITION-DATA.OFFSET
                MOVE OPTIONAL-EMPTY TO PARTITION-DATA.LEADER-EPOCH
                MOVE "" TO PARTITION-DATA.METADATA
                MOVE ERRORS-NONE TO PARTITION-DATA.ERROR
                RETURN PARTITION-DATA
            END-PERFORM.
        ELSE
            MOVE TOPIC-PARTITIONS TO LOCAL-TOPIC-PARTITIONS.
            PERFORM GET-OFFSETS-FOR-PARTITIONS VARYING TP IN LOCAL-TOPIC-PARTITIONS
                CALL "GET-OFFSET" USING RETURN-GROUP, TP.
                IF REQUIRE-STABLE AND RETURN-GROUP.HAS-PENDING-OFFSET-COMMITS-FOR-TOPIC-PARTITION(TP)
                    MOVE OFFSET-FETCH-RESPONSE-INVALID-OFFSET TO PARTITION-DATA.OFFSET
                    MOVE OPTIONAL-EMPTY TO PARTITION-DATA.LEADER-EPOCH
                    MOVE "" TO PARTITION-DATA.METADATA
                    MOVE ERRORS-UNSTABLE-OFFSET-COMMIT TO PARTITION-DATA.ERROR
                ELSE
                    MOVE RETURN-GROUP.OFFSET(TP).COMMITTED-OFFSET TO PARTITION-DATA.OFFSET
                    IF RETURN-GROUP.OFFSET(TP).LEADER-EPOCH.IS-PRESENT
                        MOVE RETURN-GROUP.OFFSET(TP).LEADER-EPOCH.GET-AS-INT TO PARTITION-DATA.LEADER-EPOCH.GET-AS-INT
                    ELSE
                        MOVE OPTIONAL-EMPTY TO PARTITION-DATA.LEADER-EPOCH
                    END-IF
                    MOVE RETURN-GROUP.OFFSET(TP).METADATA TO PARTITION-DATA.METADATA
                    MOVE ERRORS-NONE TO PARTITION-DATA.ERROR
                END-IF
                RETURN PARTITION-DATA
            END-PERFORM.
        END-IF.
    END-IF.

SCHEDULE-LOAD-GROUP-AND-OFFSETS.
    CALL "PARTITION-FOR" USING GROUP-ID.
    MOVE RETURN-CODE TO OFFSETS-PARTITION.
    CALL "SCHEDULE-LOAD-GROUPS-AND-OFFSETS" USING OFFSETS-PARTITION, COORDINATOR-EPOCH, ON-GROUP-LOADED.

REMOVE-GROUPS-FOR-PARTITION.
    CALL "PARTITION-FOR" USING GROUP-ID.
    MOVE RETURN-CODE TO OFFSETS-PARTITION.
    CALL "REMOVE-GROUPS-AND-OFFSETS" USING OFFSETS-PARTITION, COORDINATOR-EPOCH, ON-GROUP-UNLOADED.

SCHEDULE-HANDLE-TXN-COMPLETION.
    CALL "HANDLE-TXN-COMPLETION" USING PRODUCER-ID, COMPLETED-PARTITIONS, IS-COMMIT.

CLEANUP-GROUP-METADATA.
    CALL "TIME" RETURNING CURRENT-TIMESTAMP.
    CALL "CLEANUP-GROUP-METADATA" USING GROUP-METADATA-CACHE.ENTRIES, REQUEST-LOCAL, CLEANUP-FUNCTION.
    MOVE OFFSETS-REMOVED TO OFFSET-EXPIRED-SENSOR.

SHUTDOWN.
    MOVE 1 TO SHUTTING-DOWN.
    CALL "SHUTDOWN" ON SCHEDULER.
    CALL "REMOVE-METRIC" USING GROUP-METADATA-MANAGER-LOAD-TIME-SENSOR.
    CALL "REMOVE-METRIC" USING GROUP-METADATA-MANAGER-OFFSET-COMMITS-SENSOR.
    CALL "REMOVE-METRIC" USING GROUP-METADATA-MANAGER-OFFSET-EXPIRED-SENSOR.
    
ONLINE-PARTITION.
    CALL "GET-ONLINE-PARTITION" USING TOPIC-PARTITION.
    MOVE RETURN-VALUE TO RETURN-PARTITION.

ADD-OWNED-PARTITION.
    PERFORM INLOCK PARTITION-LOCK.
    MOVE PARTITION TO OWNED-PARTITIONS(OWNED-PARTITION-COUNT).
    ADD 1 TO OWNED-PARTITION-COUNT.

ADD-LOADING-PARTITION.
    PERFORM INLOCK PARTITION-LOCK.
    SEARCH OWNED-PARTITIONS VARYING IDX
        WHEN PARTITION = PARTITION-ID
        MOVE 0 TO RETURN-CODE
        STOP.
    SEARCH LOADING-PARTITIONS VARYING IDX
        WHEN PARTITION = PARTITION-ID
        MOVE 0 TO RETURN-CODE
        STOP.
    MOVE PARTITION TO LOADING-PARTITIONS(LOADING-PARTITION-COUNT).
    ADD 1 TO LOADING-PARTITION-COUNT.
    MOVE 1 TO RETURN-CODE.