IDENTIFICATION DIVISION.
PROGRAM-ID. CONTROLLER-REGISTRATION-MANAGER.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    COPY "KAFKA-UTILS.cpy".
    COPY "KAFKA-COMMON.cpy".
    COPY "METADATA-PUBLISHER.cpy".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-NODE-ID                           PIC 9(9).
01 WS-CLUSTER-ID                        PIC X(255).
01 WS-TIME                              USAGE FUNCTION-POINTER.
01 WS-THREAD-NAME-PREFIX                PIC X(255).
01 WS-SUPPORTED-FEATURES                USAGE POINTER.
01 WS-INCARNATION-ID                    USAGE POINTER.
01 WS-LISTENER-INFO                     USAGE POINTER.
01 WS-RESEND-EXPONENTIAL-BACKOFF        USAGE POINTER.

01 WS-PENDING-RPC                       PIC X VALUE "N".
01 WS-SUCCESSFUL-RPCS                   PIC 9(18) VALUE 0.
01 WS-FAILED-RPCS                       PIC 9(18) VALUE 0.
01 WS-METADATA-VERSION                  USAGE POINTER.
01 WS-REGISTERED-IN-LOG                 PIC X VALUE "N".
01 WS-CHANNEL-MANAGER                   USAGE POINTER.

01 WS-LOGGER-CTX                        USAGE POINTER.
01 WS-LOGGER-IDENT                      PIC X(255).

01 WS-EVENT-QUEUE                       USAGE POINTER.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    PERFORM INITIALIZE-CONTROLLER-REGISTRATION-MANAGER.
    PERFORM START-CONTROLLER-REGISTRATION-MANAGER.
    PERFORM SHUTDOWN-CONTROLLER-REGISTRATION-MANAGER.
    STOP RUN.

INITIALIZE-CONTROLLER-REGISTRATION-MANAGER.
    MOVE WS-NODE-ID TO WS-NODE-ID.
    MOVE WS-CLUSTER-ID TO WS-CLUSTER-ID.
    SET WS-TIME TO WS-TIME.
    MOVE WS-THREAD-NAME-PREFIX TO WS-THREAD-NAME-PREFIX.
    SET WS-SUPPORTED-FEATURES TO WS-SUPPORTED-FEATURES.
    SET WS-INCARNATION-ID TO WS-INCARNATION-ID.
    SET WS-LISTENER-INFO TO WS-LISTENER-INFO.
    SET WS-RESEND-EXPONENTIAL-BACKOFF TO WS-RESEND-EXPONENTIAL-BACKOFF.

    PERFORM INITIALIZE-LOGGER.
    PERFORM INITIALIZE-EVENT-QUEUE.

INITIALIZE-LOGGER.
    MOVE "[ControllerRegistrationManager" TO WS-LOGGER-IDENT.
    STRING WS-LOGGER-IDENT
           " id=" DELIMITED BY SIZE INTO WS-LOGGER-IDENT
           WS-NODE-ID DELIMITED BY SPACE INTO WS-LOGGER-IDENT
           " incarnation=" DELIMITED BY SIZE INTO WS-LOGGER-IDENT
           WS-INCARNATION-ID DELIMITED BY SPACE INTO WS-LOGGER-IDENT
           "] " DELIMITED BY SIZE INTO WS-LOGGER-IDENT.
    SET WS-LOGGER-CTX TO WS-LOGGER-IDENT.

INITIALIZE-EVENT-QUEUE.
    SET WS-EVENT-QUEUE TO FUNCTION NEW-KAFKA-EVENT-QUEUE(WS-TIME, WS-LOGGER-CTX, WS-THREAD-NAME-PREFIX, FUNCTION NEW-SHUTDOWN-EVENT()).

START-CONTROLLER-REGISTRATION-MANAGER.
    CALL "APPEND" USING WS-EVENT-QUEUE, FUNCTION NEW-START-REGISTRATION-MANAGER(WS-CHANNEL-MANAGER).

SHUTDOWN-CONTROLLER-REGISTRATION-MANAGER.
    CALL "BEGIN-SHUTDOWN" USING WS-EVENT-QUEUE.
    CALL "CLOSE" USING WS-EVENT-QUEUE.

ON-METADATA-UPDATE.
    CALL "APPEND" USING WS-EVENT-QUEUE, FUNCTION NEW-METADATA-UPDATE-EVENT(WS-METADATA-DELTA, WS-METADATA-IMAGE).

MAYBE-SEND-CONTROLLER-REGISTRATION.
    PERFORM VARYING WS-I FROM 1 BY 1 UNTIL WS-I > 10
        IF WS-REGISTERED-IN-LOG
            PERFORM LOG-DEBUG "maybeSendControllerRegistration: controller is already registered."
        ELSE IF WS-CHANNEL-MANAGER IS NULL
            PERFORM LOG-DEBUG "maybeSendControllerRegistration: cannot register yet because the channel manager has not been initialized."
        ELSE IF WS-METADATA-VERSION IS NULL
            PERFORM LOG-INFO "maybeSendControllerRegistration: cannot register yet because the metadata.version is not known yet."
        ELSE IF NOT WS-METADATA-VERSION->IS-CONTROLLER-REGISTRATION-SUPPORTED
            PERFORM LOG-INFO "maybeSendControllerRegistration: cannot register yet because the metadata.version is " WS-METADATA-VERSION " which does not support KIP-919 controller registration."
        ELSE IF WS-PENDING-RPC = "Y"
            PERFORM LOG-INFO "maybeSendControllerRegistration: waiting for the previous RPC to complete."
        ELSE
            PERFORM SEND-CONTROLLER-REGISTRATION
            EXIT PARAGRAPH
        END-IF
        PERFORM SCHEDULE-NEXT-COMMUNICATION(FUNCTION BACKOFF(WS-RESEND-EXPONENTIAL-BACKOFF, WS-FAILED-RPCS))
    END-PERFORM.

SEND-CONTROLLER-REGISTRATION.
    PERFORM VARYING WS-I FROM 1 BY 1 UNTIL WS-I > WS-SUPPORTED-FEATURES->SIZE
        MOVE WS-SUPPORTED-FEATURES->ITEM(WS-I)->NAME TO WS-FEATURE-NAME
        MOVE WS-SUPPORTED-FEATURES->ITEM(WS-I)->MIN-SUPPORTED-VERSION TO WS-FEATURE-MIN-VERSION
        MOVE WS-SUPPORTED-FEATURES->ITEM(WS-I)->MAX-SUPPORTED-VERSION TO WS-FEATURE-MAX-VERSION
        CALL "ADD" USING WS-FEATURE-COLLECTION, FUNCTION NEW-CONTROLLER-REGISTRATION-FEATURE(WS-FEATURE-NAME, WS-FEATURE-MIN-VERSION, WS-FEATURE-MAX-VERSION)
    END-PERFORM.

    MOVE WS-NODE-ID TO WS-CONTROLLER-ID.
    MOVE WS-INCARNATION-ID TO WS-INCARNATION-ID.
    MOVE WS-LISTENER-INFO->TO-CONTROLLER-REGISTRATION-REQUEST TO WS-LISTENER-INFO-COLLECTION.
    MOVE FALSE TO WS-ZK-MIGRATION-READY.

    PERFORM LOG-INFO "sendControllerRegistration: attempting to send " WS-CONTROLLER-ID ", " WS-INCARNATION-ID ", " WS-LISTENER-INFO-COLLECTION ", " WS-ZK-MIGRATION-READY.
    CALL "SEND-REQUEST" USING WS-CHANNEL-MANAGER, FUNCTION NEW-CONTROLLER-REGISTRATION-REQUEST-BUILDER(WS-CONTROLLER-ID, WS-FEATURE-COLLECTION, WS-INCARNATION-ID, WS-LISTENER-INFO-COLLECTION, WS-ZK-MIGRATION-READY), FUNCTION NEW-REGISTRATION-RESPONSE-HANDLER().
    MOVE "Y" TO WS-PENDING-RPC.

REGISTRATION-RESPONSE-HANDLER.
    MOVE "N" TO WS-PENDING-RPC.
    IF WS-AUTHENTICATION-EXCEPTION IS NOT NULL
        PERFORM LOG-ERROR "RegistrationResponseHandler: authentication error" WS-AUTHENTICATION-EXCEPTION
        PERFORM SCHEDULE-NEXT-COMMUNICATION-AFTER-FAILURE
    ELSE IF WS-VERSION-MISMATCH IS NOT NULL
        PERFORM LOG-ERROR "RegistrationResponseHandler: unsupported API version error" WS-VERSION-MISMATCH
        PERFORM SCHEDULE-NEXT-COMMUNICATION-AFTER-FAILURE
    ELSE IF WS-RESPONSE-BODY IS NULL
        PERFORM LOG-ERROR "RegistrationResponseHandler: unknown error"
        PERFORM SCHEDULE-NEXT-COMMUNICATION-AFTER-FAILURE
    ELSE IF WS-RESPONSE-BODY IS NOT CONTROLLER-REGISTRATION-RESPONSE
        PERFORM LOG-ERROR "RegistrationResponseHandler: invalid response type error"
        PERFORM SCHEDULE-NEXT-COMMUNICATION-AFTER-FAILURE
    ELSE
        MOVE WS-RESPONSE-BODY->ERROR-CODE TO WS-ERROR-CODE
        MOVE WS-RESPONSE-BODY->ERROR-MESSAGE TO WS-ERROR-MESSAGE
        IF WS-ERROR-CODE = ERRORS-NONE
            ADD 1 TO WS-SUCCESSFUL-RPCS
            MOVE 0 TO WS-FAILED-RPCS
            PERFORM LOG-INFO "RegistrationResponseHandler: controller acknowledged ControllerRegistrationRequest."
        ELSE
            PERFORM LOG-INFO "RegistrationResponseHandler: controller returned error " WS-ERROR-CODE " (" WS-ERROR-MESSAGE ")"
            PERFORM SCHEDULE-NEXT-COMMUNICATION-AFTER-FAILURE
        END-IF
    END-IF.

SCHEDULE-NEXT-COMMUNICATION-AFTER-FAILURE.
    MOVE FUNCTION BACKOFF(WS-RESEND-EXPONENTIAL-BACKOFF, WS-FAILED-RPCS) TO WS-DELAY-MS
    ADD 1 TO WS-FAILED-RPCS
    PERFORM SCHEDULE-NEXT-COMMUNICATION(WS-DELAY-MS).

SCHEDULE-NEXT-COMMUNICATION.
    PERFORM LOG-TRACE "Scheduling next communication at " WS-DELAY-MS " ms from now."
    MOVE FUNCTION CURRENT-TIMESTAMP + WS-DELAY-MS * 1000000 TO WS-DEADLINE-NS
    CALL "SCHEDULE-DEFERRED" USING WS-EVENT-QUEUE, "communication", FUNCTION NEW-DEADLINE-FUNCTION(WS-DEADLINE-NS), FUNCTION NEW-MAYBE-SEND-CONTROLLER-REGISTRATION().