IDENTIFICATION DIVISION.
PROGRAM-ID. ABSTRACT-FETCHER-MANAGER.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    COPY "KAFKA-UTILS.cpy".
    COPY "KAFKA-COMMON.cpy".
    COPY "KAFKA-METRICS.cpy".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-FETCHER-THREAD-MAP.
    05 FETCHER-THREAD-MAP PIC X(256) OCCURS 256 TIMES.
01 WS-LOCK PIC X(1).
01 WS-NUM-FETCHERS-PER-BROKER PIC 9(4) COMP.
01 WS-FAILED-PARTITIONS.
    05 FAILED-PARTITIONS-SET PIC X(256) OCCURS 256 TIMES.
01 WS-TAGS.
    05 WS-CLIENT-ID PIC X(32).
01 WS-METRICS-GROUP.
    05 METRICS-GROUP PIC X(256).
01 WS-DEAD-THREAD-COUNT PIC 9(4) COMP.

PROCEDURE DIVISION.

MAIN-PROCEDURE.
    PERFORM INIT-FETCHER-MANAGER.
    PERFORM RESIZE-THREAD-POOL.
    PERFORM ADD-FETCHER-FOR-PARTITIONS.
    PERFORM MARK-PARTITIONS-FOR-TRUNCATION.
    PERFORM GET-FETCHER.
    PERFORM GET-FETCH-ID.
    PERFORM ADD-FAILED-PARTITION.
    PERFORM MAYBE-UPDATE-TOPIC-IDS.
    PERFORM REMOVE-FETCHER-FOR-PARTITIONS.
    PERFORM SHUTDOWN-IDLE-FETCHER-THREADS.
    PERFORM CLOSE-ALL-FETCHERS.

INIT-FETCHER-MANAGER.
    MOVE NAME TO WS-CLIENT-ID.
    MOVE NEW KAFKA-METRICS-GROUP(SELF) TO WS-METRICS-GROUP.
    MOVE NEW FAILED-PARTITIONS TO WS-FAILED-PARTITIONS.
    MOVE NAME TO WS-IDENT.

RESIZE-THREAD-POOL.
    PERFORM MIGRATE-PARTITIONS.
    PERFORM SHUTDOWN-IDLE-FETCHER-THREADS.

MIGRATE-PARTITIONS.
    MOVE NEW MUTABLE-MAP TO WS-REMOVED-PARTITIONS-MAP.
    LOCK WS-LOCK.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(FETCHER-THREAD-MAP)
        MOVE FETCHER-THREAD-MAP(I+1) TO WS-CURRENT-FETCHER-THREAD
        IF WS-CURRENT-FETCHER-THREAD-ID >= WS-NEW-SIZE
            CALL "SHUTDOWN" USING WS-CURRENT-FETCHER-THREAD
        PERFORM REMOVE-ALL-PARTITIONS
            PERFORM VARYING J FROM 0 BY 1 UNTIL J >= LENGTH(WS-REMOVED-PARTITIONS-MAP)
                MOVE WS-REMOVED-PARTITIONS-MAP(J+1) TO WS-CURRENT-TOPIC-PARTITION
                MOVE NEW INITIAL-FETCH-STATE(WS-TOPIC-ID, WS-LEADER-BROKER, WS-CURRENT-LEADER-EPOCH, WS-INIT-OFFSET) 
                        TO WS-REMOVED-PARTITIONS-MAP(J+1)
            END-PERFORM
        END-IF
    END-PERFORM.
    CALL "ADD-FETCHER-FOR-PARTITIONS" USING WS-REMOVED-PARTITIONS-MAP.
    UNLOCK WS-LOCK.

ADD-FETCHER-FOR-PARTITIONS.
    LOCK WS-LOCK.
    MOVE NEW MUTABLE-MAP TO WS-PARTITIONS-PER-FETCHER.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(WS-PARTITIONS-TO-ADD)
        MOVE WS-PARTITIONS-TO-ADD(I+1) TO WS-CURRENT-TOPIC-PARTITION
        MOVE WS-FETCH-ID(WS-CURRENT-TOPIC-PARTITION) TO WS-CURRENT-FETCH-ID
        MOVE NEW BROKER-AND-FETCH-ID(WS-LEADER-BROKER, WS-CURRENT-FETCH-ID) TO WS-CURRENT-BROKER-AND-FETCH-ID
        MOVE WS-PARTITIONS-TO-ADD(I+1) TO WS-PARTITIONS-PER-FETCHER(WS-CURRENT-BROKER-AND-FETCH-ID)
    END-PERFORM.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(WS-PARTITIONS-PER-FETCHER)
        MOVE WS-PARTITIONS-PER-FETCHER(I+1) TO WS-CURRENT-PARTITIONS
        MOVE WS-BROKER-ID(I+1) TO WS-CURRENT-BROKER-ID
        MOVE WS-FETCH-ID(I+1) TO WS-CURRENT-FETCH-ID
        MOVE NEW BROKER-ID-AND-FETCH-ID(WS-CURRENT-BROKER-ID, WS-CURRENT-FETCH-ID) TO WS-CURRENT-BROKER-ID-AND-FETCH-ID
        PERFORM ADD-AND-START-FETCHER-THREAD
        PERFORM ADD-PARTITIONS-TO-FETCHER-THREAD USING WS-CURRENT-FETCHER-THREAD, WS-CURRENT-PARTITIONS
    END-PERFORM.
    UNLOCK WS-LOCK.

ADD-AND-START-FETCHER-THREAD.
    MOVE CREATE-FETCHER-THREAD(WS-CURRENT-FETCH-ID, WS-LEADER-BROKER) TO WS-CURRENT-FETCHER-THREAD.
    MOVE WS-CURRENT-FETCHER-THREAD TO FETCHER-THREAD-MAP(WS-CURRENT-BROKER-ID-AND-FETCH-ID).
    CALL "START" USING WS-CURRENT-FETCHER-THREAD.
    RETURN WS-CURRENT-FETCHER-THREAD.

MARK-PARTITIONS-FOR-TRUNCATION.
    LOCK WS-LOCK.
    MOVE GET-FETCH-ID(WS-TOPIC-PARTITION) TO WS-CURRENT-FETCH-ID.
    MOVE NEW BROKER-ID-AND-FETCH-ID(WS-BROKER-ID, WS-CURRENT-FETCH-ID) TO WS-CURRENT-BROKER-ID-AND-FETCH-ID.
    MOVE FETCHER-THREAD-MAP(WS-CURRENT-BROKER-ID-AND-FETCH-ID) TO WS-CURRENT-FETCHER-THREAD.
    CALL "MARK-PARTITIONS-FOR-TRUNCATION" USING WS-TOPIC-PARTITION, WS-TRUNCATION-OFFSET.
    UNLOCK WS-LOCK.

GET-FETCHER.
    LOCK WS-LOCK.
    SEARCH FETCHER-THREAD-MAP
        WHEN FETCH-STATE(WS-TOPIC-PARTITION) IS NOT EQUAL TO SPACES
            MOVE FETCHER-THREAD-MAP(I) TO WS-CURRENT-FETCHER-THREAD
            RETURN WS-CURRENT-FETCHER-THREAD
    END-SEARCH.
    UNLOCK WS-LOCK.
    RETURN SPACES.

GET-FETCH-ID.
    LOCK WS-LOCK.
    MOVE FUNCTION ABS(31 * FUNCTION HASH(WS-TOPIC-PARTITION-TOPIC) + FUNCTION HASH(WS-TOPIC-PARTITION-PARTITION)) 
            MODULO WS-NUM-FETCHERS-PER-BROKER TO WS-CURRENT-FETCH-ID.
    UNLOCK WS-LOCK.
    RETURN WS-CURRENT-FETCH-ID.

ADD-FAILED-PARTITION.
    LOCK WS-LOCK.
    MOVE WS-TOPIC-PARTITION TO FAILED-PARTITIONS-SET(FUNCTION HASH(WS-TOPIC-PARTITION)).
    UNLOCK WS-LOCK.

MAYBE-UPDATE-TOPIC-IDS.
    LOCK WS-LOCK.
    MOVE NEW MUTABLE-MAP TO WS-PARTITIONS-PER-FETCHER.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(WS-PARTITIONS-TO-UPDATE)
        MOVE WS-PARTITIONS-TO-UPDATE(I+1) TO WS-CURRENT-TOPIC-PARTITION
        MOVE WS-FETCH-ID(WS-CURRENT-TOPIC-PARTITION) TO WS-CURRENT-FETCH-ID
        MOVE NEW BROKER-ID-AND-FETCH-ID(WS-LEADER-ID, WS-CURRENT-FETCH-ID) TO WS-CURRENT-BROKER-ID-AND-FETCH-ID
        MOVE WS-CURRENT-TOPIC-PARTITION TO WS-PARTITIONS-PER-FETCHER(WS-CURRENT-BROKER-ID-AND-FETCH-ID)
    END-PERFORM.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(WS-PARTITIONS-PER-FETCHER)
        MOVE WS-PARTITIONS-PER-FETCHER(I+1) TO WS-CURRENT-PARTITIONS
        MOVE WS-BROKER-ID-AND-FETCH-ID(I+1) TO WS-CURRENT-BROKER-ID-AND-FETCH-ID
        MOVE FETCHER-THREAD-MAP(WS-CURRENT-BROKER-ID-AND-FETCH-ID) TO WS-CURRENT-FETCHER-THREAD
        CALL "MAYBE-UPDATE-TOPIC-IDS" USING WS-CURRENT-PARTITIONS, WS-TOPIC-IDS
    END-PERFORM.
    UNLOCK WS-LOCK.

REMOVE-FETCHER-FOR-PARTITIONS.
    LOCK WS-LOCK.
    MOVE NEW MUTABLE-MAP TO WS-FETCH-STATES.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(FETCHER-THREAD-MAP)
        MOVE FETCHER-THREAD-MAP(I+1) TO WS-CURRENT-FETCHER-THREAD
        MOVE WS-CURRENT-FETCHER-THREAD-PARTITIONS TO WS-FETCH-STATES
    END-PERFORM.
    MOVE WS-PARTITIONS TO FAILED-PARTITIONS-SET.
    UNLOCK WS-LOCK.
    RETURN WS-FETCH-STATES.

SHUTDOWN-IDLE-FETCHER-THREADS.
    LOCK WS-LOCK.
    MOVE NEW MUTABLE-SET TO WS-KEYS-TO-REMOVE.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(FETCHER-THREAD-MAP)
        MOVE FETCHER-THREAD-MAP(I+1) TO WS-CURRENT-FETCHER-THREAD
        IF WS-CURRENT-FETCHER-THREAD-PARTITIONS = 0
            CALL "SHUTDOWN" USING WS-CURRENT-FETCHER-THREAD
            MOVE FETCHER-THREAD-MAP(I+1) TO WS-KEYS-TO-REMOVE(FUNCTION HASH(I+1))
        END-IF
    END-PERFORM.
    MOVE WS-KEYS-TO-REMOVE TO FETCHER-THREAD-MAP.
    UNLOCK WS-LOCK.

CLOSE-ALL-FETCHERS.
    LOCK WS-LOCK.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(FETCHER-THREAD-MAP)
        MOVE FETCHER-THREAD-MAP(I+1) TO WS-CURRENT-FETCHER-THREAD
        CALL "INITIATE-SHUTDOWN" USING WS-CURRENT-FETCHER-THREAD
    END-PERFORM.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(FETCHER-THREAD-MAP)
        MOVE FETCHER-THREAD-MAP(I+1) TO WS-CURRENT-FETCHER-THREAD
        CALL "SHUTDOWN" USING WS-CURRENT-FETCHER-THREAD
    END-PERFORM.
    MOVE SPACES TO FETCHER-THREAD-MAP.
    UNLOCK WS-LOCK.

DEAD-THREAD-COUNT.
    LOCK WS-LOCK.
    MOVE 0 TO WS-DEAD-THREAD-COUNT.
    PERFORM VARYING I FROM 0 BY 1 UNTIL I >= LENGTH(FETCHER-THREAD-MAP)
        MOVE FETCHER-THREAD-MAP(I+1) TO WS-CURRENT-FETCHER-THREAD
        IF WS-CURRENT-FETCHER-THREAD-FAILED
            ADD 1 TO WS-DEAD-THREAD-COUNT
        END-IF
    END-PERFORM.
    UNLOCK WS-LOCK.
    RETURN WS-DEAD-THREAD-COUNT.

STOP RUN.