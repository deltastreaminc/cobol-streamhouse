IDENTIFICATION DIVISION.
PROGRAM-ID. BROKERBLOCKINGSENDER.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    COPY KAFKACONFIG.
    COPY METRICS.
    COPY TIME.
    COPY LOGCONTEXT.
    COPY BROKERENDPOINT.
    COPY NODE.
    COPY RECONFIGURABLE.
    COPY ABSTRACTREQUEST.
    COPY CLIENTRESPONSE.
    COPY NETWORKUTIL.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 SOURCEBROKEREFERENCE USAGE POINTER.
01 BROKERCONFIGREFERENCE USAGE POINTER.
01 METRICSREFERENCE USAGE POINTER. 
01 TIMEREFERENCE USAGE POINTER.
01 FETCHERID PIC 9(9) COMP.
01 CLIENTID PIC X(32).
01 LOGCONTEXTREFERENCE USAGE POINTER.
01 SOURCENODEREFERENCE USAGE POINTER.
01 SOCKETTIMEOUT PIC 9(9) COMP.
01 NETWORKCLIENTREFERENCE USAGE POINTER.
01 RECONFIGURABLEBUILDERREFERENCE USAGE POINTER.
01 CLIENTREQUEST USAGE POINTER.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    MOVE FUNCTION JAVA-NEW("kafka.server.BrokerBlockingSender", 
                        SOURCEBROKEREFERENCE, 
                        BROKERCONFIGREFERENCE, 
                        METRICSREFERENCE,
                        TIMEREFERENCE,
                        FETCHERID,
                        CLIENTID,
                        LOGCONTEXTREFERENCE) TO SELF.
    
    MOVE FUNCTION JAVA-NEW("org.apache.kafka.common.Node",
                        FUNCTION JAVA-FIELD-REF(SOURCEBROKEREFERENCE, "id"),
                        FUNCTION JAVA-FIELD-REF(SOURCEBROKEREFERENCE, "host"),
                        FUNCTION JAVA-FIELD-REF(SOURCEBROKEREFERENCE, "port")) TO SOURCENODEREFERENCE.
    
    MOVE FUNCTION JAVA-FIELD-REF(BROKERCONFIGREFERENCE, "replicaSocketTimeoutMs") TO SOCKETTIMEOUT.
    
    PERFORM INIT-NETWORKCLIENT.
    
    PROCEDURE-ID. BROKERENDPOINT.
        RETURN SOURCEBROKEREFERENCE.
    
    PROCEDURE-ID. SENDREQUEST.
        MOVE FUNCTION JAVA-METHOD-REF(NETWORKCLIENTREFERENCE, "newClientRequest",
                                    FUNCTION JAVA-FIELD-REF(SOURCEBROKEREFERENCE, "id"),
                                    FUNCTION JAVA-CAST(REQUESTBUILDER, ABSTRACTREQUEST-BUILDER),
                                    FUNCTION JAVA-METHOD-REF(TIMEREFERENCE, "milliseconds"),
                                    FUNCTION JAVA-LITERAL(TRUE)) TO CLIENTREQUEST.
        PERFORM SEND-AND-RECEIVE-REQUEST.
        RETURN FUNCTION JAVA-CAST(CLIENTRESPONSE, FUNCTION JAVA-METHOD-REF(NETWORKCLIENTREFERENCE, "sendAndReceive", CLIENTREQUEST, TIMEREFERENCE)).
    
    PROCEDURE-ID. INITIATECLOSE.
        IF RECONFIGURABLEBUILDERREFERENCE IS NOT NULL
        THEN
            CALL FUNCTION JAVA-METHOD-REF(BROKERCONFIGREFERENCE, "removeReconfigurable", RECONFIGURABLEBUILDERREFERENCE)
        END-IF.
        CALL FUNCTION JAVA-METHOD-REF(NETWORKCLIENTREFERENCE, "initiateClose").
    
    PROCEDURE-ID. CLOSE.
        CALL FUNCTION JAVA-METHOD-REF(NETWORKCLIENTREFERENCE, "close").
    
    PROCEDURE-ID. INIT-NETWORKCLIENT.
        MOVE FUNCTION JAVA-NEW("org.apache.kafka.common.network.Selector",
                            FUNCTION JAVA-FIELD-REF(KAFKACONFIG, "UNLIMITED"),
                            FUNCTION JAVA-FIELD-REF(BROKERCONFIGREFERENCE, "connectionsMaxIdleMs"),
                            METRICSREFERENCE,
                            TIMEREFERENCE,
                            FUNCTION JAVA-LITERAL("replica-fetcher"),
                            FUNCTION JAVA-CAST(JAVA-MAP, FUNCTION JAVA-NEW("java.util.HashMap"))) TO NETWORKCLIENTREFERENCE.
        CALL FUNCTION JAVA-METHOD-REF(NETWORKCLIENTREFERENCE, "addMetadataListener", FUNCTION JAVA-NEW("org.apache.kafka.clients.ManualMetadataUpdater")).
        MOVE FUNCTION JAVA-NEW("org.apache.kafka.common.network.NetworkClient",
                            NETWORKCLIENTREFERENCE,
                            CLIENTID,
                            FUNCTION JAVA-LITERAL(1),
                            FUNCTION JAVA-LITERAL(0),
                            FUNCTION JAVA-LITERAL(0),
                            FUNCTION JAVA-FIELD-REF(KAFKACONFIG, "USE_DEFAULT_BUFFER_SIZE"),
                            FUNCTION JAVA-FIELD-REF(BROKERCONFIGREFERENCE, "replicaSocketReceiveBufferBytes"),
                            FUNCTION JAVA-FIELD-REF(BROKERCONFIGREFERENCE, "requestTimeoutMs"),
                            FUNCTION JAVA-FIELD-REF(BROKERCONFIGREFERENCE, "connectionSetupTimeoutMs"),
                            FUNCTION JAVA-FIELD-REF(BROKERCONFIGREFERENCE, "connectionSetupTimeoutMaxMs"),
                            TIMEREFERENCE,
                            FUNCTION JAVA-LITERAL(FALSE),
                            FUNCTION JAVA-NEW("org.apache.kafka.clients.ApiVersions"),
                            LOGCONTEXTREFERENCE,
                            FUNCTION JAVA-NEW("org.apache.kafka.server.network.MetadataRecoveryStrategy$NONE")) TO NETWORKCLIENTREFERENCE.
        
        MOVE FUNCTION JAVA-METHOD-REF(KAFKACONFIG, "interBrokerSecurityProtocol") TO OPERAND1.
        MOVE FUNCTION JAVA-LITERAL("SERVER") TO OPERAND2.
        MOVE FUNCTION JAVA-METHOD-REF(BROKERCONFIGREFERENCE, "interBrokerListenerName") TO OPERAND3.
        MOVE FUNCTION JAVA-METHOD-REF(BROKERCONFIGREFERENCE, "saslMechanismInterBrokerProtocol") TO OPERAND4.
        MOVE FUNCTION JAVA-NEW("org.apache.kafka.common.network.ChannelBuilders", OPERAND1, OPERAND2, BROKERCONFIGREFERENCE, OPERAND3, OPERAND4, TIMEREFERENCE, LOGCONTEXTREFERENCE) TO NETWORKCLIENTREFERENCE.
        
        EVALUATE FUNCTION JAVA-INSTANCEOF(NETWORKCLIENTREFERENCE, "org.apache.kafka.common.Reconfigurable")
        WHEN TRUE
            CALL FUNCTION JAVA-METHOD-REF(BROKERCONFIGREFERENCE, "addReconfigurable", NETWORKCLIENTREFERENCE)
            MOVE NETWORKCLIENTREFERENCE TO RECONFIGURABLEBUILDERREFERENCE
        WHEN OTHER
            MOVE FUNCTION JAVA-LITERAL(NULL) TO RECONFIGURABLEBUILDERREFERENCE
        END-EVALUATE.
    
    PROCEDURE-ID. SEND-AND-RECEIVE-REQUEST.
        PERFORM UNTIL FUNCTION JAVA-METHOD-REF(NETWORKCLIENTREFERENCE, "awaitReady", SOURCENODEREFERENCE, TIMEREFERENCE, SOCKETTIMEOUT)
            CONTINUE
        END-PERFORM.
        CALL FUNCTION JAVA-METHOD-REF(NETWORKCLIENTREFERENCE, "sendAndReceive", CLIENTREQUEST, TIMEREFERENCE).