IDENTIFICATION DIVISION.
PROGRAM-ID. FetchManager.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    FUNCTION TIME OF Class Time.
    FUNCTION FetchSessionCache OF Class FetchSessionCache.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-TIME USAGE IS OBJECT REFERENCE Time.
01 WS-CACHE USAGE IS OBJECT REFERENCE FetchSessionCache.
01 WS-LOGGER USAGE IS OBJECT REFERENCE Logger.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    INITIALIZE WS-TIME WS-CACHE WS-LOGGER.
    
    PERFORM NEWCONTEXT VARYING REQVERSION FROM 1 BY 1
                                    UNTIL REQVERSION > 15
                                    WITH TEST AFTER.
        
    STOP RUN.

NEWCONTEXT.
    MOVE FUNCTION FetchSessionCache-GETCACHESHARD(REQMETADATA-SESSIONID) TO WS-CACHE.
    
    IF REQMETADATA-ISFULL THEN
        PERFORM CREATE-FULL-CONTEXT
    ELSE
        PERFORM CREATE-INCREMENTAL-CONTEXT
    END-IF.
    
    GOBACK.

CREATE-FULL-CONTEXT.
    PERFORM REMOVE-FETCH-SESSION.
    
    IF REQMETADATA-EPOCH = FINAL-EPOCH THEN
        MOVE NEW SessionlessFetchContext(FETCHDATA) TO WS-CONTEXT
    ELSE
        MOVE NEW FullFetchContext(WS-TIME, WS-CACHE, REQMETADATA, FETCHDATA, REQVERSION >= 13, WS-ISFOLLOWER) TO WS-CONTEXT
    END-IF.
    
    DISPLAY "Created a new full FetchContext with " PARTITIONS-TO-LOG-STRING(FETCHDATA-KEYSET) "."
    DISPLAY WS-REMOVEFETCHSESSIONSTR
    DISPLAY WS-SUFFIX.

CREATE-INCREMENTAL-CONTEXT.
    PERFORM CREATE-INCREMENTAL-CONTEXT-FOR-SESSION.
    
    IF WS-SESSION-EMPTY THEN
        DISPLAY "Created a new sessionless FetchContext and closing session id " WS-SESSION-ID ", " 
            "epoch " WS-SESSION-EPOCH ": after removing " PARTITIONS-TO-LOG-STRING(WS-REMOVED) ", "
            "there are no more partitions left."
        PERFORM REMOVE-SESSION-FROM-CACHE
        MOVE NEW SessionlessFetchContext(FETCHDATA) TO WS-CONTEXT
    ELSE
        PERFORM TOUCH-SESSION-IN-CACHE
        MOVE NEW IncrementalFetchContext(WS-TIME, REQMETADATA, WS-SESSION, WS-TOPICNAMES) TO WS-CONTEXT
        DISPLAY "Created a new incremental FetchContext for session id " WS-SESSION-ID ", "
            "epoch " WS-SESSION-EPOCH ": added " PARTITIONS-TO-LOG-STRING(WS-ADDED) ", "
            "updated " PARTITIONS-TO-LOG-STRING(WS-UPDATED) ", "
            "removed " PARTITIONS-TO-LOG-STRING(WS-REMOVED) "."
    END-IF.

CREATE-INCREMENTAL-CONTEXT-FOR-SESSION.
    MOVE WS-CACHE-GETSESSION(REQMETADATA-SESSIONID) TO WS-SESSION.
    
    IF WS-SESSION IS NULL THEN
        DISPLAY "Session error for " REQMETADATA-SESSIONID ": no such session ID found."
        MOVE NEW SessionErrorContext(FETCH-SESSION-ID-NOT-FOUND, REQMETADATA) TO WS-CONTEXT
    ELSE
        PERFORM WS-SESSION-SYNCHRONIZED
            IF WS-SESSION-EPOCH NOT = REQMETADATA-EPOCH THEN
                DISPLAY "Session error for " REQMETADATA-SESSIONID ": expected epoch "
                    WS-SESSION-EPOCH ", but got " REQMETADATA-EPOCH " instead."
                MOVE NEW SessionErrorContext(INVALID-FETCH-SESSION-EPOCH, REQMETADATA) TO WS-CONTEXT
            ELSE IF (WS-SESSION-USESTOPCIDS AND REQVERSION < 13) OR
                    (NOT WS-SESSION-USESTOPCIDS AND REQVERSION >= 13) THEN
                DISPLAY "Session error for " REQMETADATA-SESSIONID ": expected "
                    IF WS-SESSION-USESTOPCIDS THEN "to use topic IDs" ELSE "to not use topic IDs"
                    ", but request version " REQVERSION " means that we can not."
                MOVE NEW SessionErrorContext(FETCH-SESSION-TOPIC-ID-ERROR, REQMETADATA) TO WS-CONTEXT
            ELSE
                PERFORM WS-SESSION-UPDATE
                    IF WS-SESSION-EMPTY THEN
                        MOVE WS-ADDED TO WS-ADDED
                        MOVE WS-UPDATED TO WS-UPDATED
                        MOVE WS-REMOVED TO WS-REMOVED
                    ELSE
                        PERFORM TOUCH-SESSION-IN-CACHE
                        MOVE JFetchMetadata-NEXTEPOCH(WS-SESSION-EPOCH) TO WS-SESSION-EPOCH
                    END-IF
                END-PERFORM
            END-IF
        END-PERFORM
    END-IF.

REMOVE-FETCH-SESSION.
    MOVE WS-CACHE-GETCACHESHARD(REQMETADATA-SESSIONID) TO WS-CACHESHARD.
    MOVE WS-CACHESHARD-REMOVE(REQMETADATA-SESSIONID) TO WS-REMOVED-SESSION.
    IF WS-REMOVED-SESSION IS NOT NULL THEN
        DISPLAY "Removed fetch session " REQMETADATA-SESSIONID ".".
        MOVE " Removed fetch session " REQMETADATA-SESSIONID "." TO WS-REMOVEFETCHSESSIONSTR.
    ELSE
        MOVE SPACES TO WS-REMOVEFETCHSESSIONSTR.
    END-IF.

REMOVE-SESSION-FROM-CACHE.
    MOVE WS-CACHE-GETCACHESHARD(WS-SESSION-ID) TO WS-CACHESHARD.
    MOVE WS-CACHESHARD-REMOVE(WS-SESSION-ID) TO WS-REMOVED-SESSION.

TOUCH-SESSION-IN-CACHE.
    MOVE WS-CACHE-GETCACHESHARD(WS-SESSION-ID) TO WS-CACHESHARD.
    PERFORM WS-CACHESHARD-TOUCH(WS-SESSION, WS-TIME-MILLISECONDS).

PARTITIONS-TO-LOG-STRING.
    PERFORM FetchSession-PARTITIONSTOLOGSTRING(PARTITIONS, WS-LOGGER-ISENABLED).

IDENTIFICATION DIVISION.
PROGRAM-ID. SessionlessFetchContext.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-LOGGER USAGE IS OBJECT REFERENCE Logger.
01 WS-FETCHDATA USAGE IS OBJECT REFERENCE java.util.Map.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    INITIALIZE WS-LOGGER WS-FETCHDATA.
    
    PERFORM GETFETCHOFFSET.
    PERFORM FOREACHPARTITION.
    PERFORM GETRESPONSESIZE.
    PERFORM UPDATEANDGENERATERESPONSEDATA.
    
    GOBACK.

GETFETCHOFFSET.
    MOVE WS-FETCHDATA(WS-TOPICPARTITION) TO WS-REQDATA.
    IF WS-REQDATA IS NOT NULL THEN
        RETURN WS-REQDATA-FETCHOFFSET.
    ELSE
        RETURN ZERO.
    END-IF.

FOREACHPARTITION.
    PERFORM VARYING WS-ENTRY IN WS-FETCHDATA-KEYSET
        CALL FUN USING WS-ENTRY WS-FETCHDATA(WS-ENTRY)
    END-PERFORM.

GETRESPONSESIZE.
    MOVE FetchResponse-SIZEOF(WS-VERSIONID, WS-UPDATES-ENTRYITERATOR) TO WS-RESPONSESIZE.
    RETURN WS-RESPONSESIZE.

UPDATEANDGENERATERESPONSEDATA.
    MOVE FetchResponse-OF(FETCH-NONE, ZERO, INVALID-SESSION-ID, WS-UPDATES, WS-NODEENDPOINTS) TO WS-RESPONSE.
    RETURN WS-RESPONSE.

IDENTIFICATION DIVISION.
PROGRAM-ID. FullFetchContext.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-TIME USAGE IS OBJECT REFERENCE Time.
01 WS-CACHE USAGE IS OBJECT REFERENCE FetchSessionCache.
01 WS-REQMETADATA USAGE IS OBJECT REFERENCE JFetchMetadata.
01 WS-FETCHDATA USAGE IS OBJECT REFERENCE java.util.Map.
01 WS-USESTOPCIDS PIC 1 VALUE 0.
01 WS-ISFOLLOWER PIC 1 VALUE 0.
01 WS-LOGGER USAGE IS OBJECT REFERENCE Logger.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    INITIALIZE WS-TIME WS-CACHE WS-REQMETADATA WS-FETCHDATA WS-USESTOPCIDS WS-ISFOLLOWER WS-LOGGER.
    
    PERFORM GETFETCHOFFSET.
    PERFORM FOREACHPARTITION.
    PERFORM GETRESPONSESIZE.
    PERFORM UPDATEANDGENERATERESPONSEDATA.
    
    GOBACK.

GETFETCHOFFSET.
    MOVE WS-FETCHDATA(WS-TOPICPARTITION) TO WS-REQDATA.
    IF WS-REQDATA IS NOT NULL THEN
        RETURN WS-REQDATA-FETCHOFFSET.
    ELSE
        RETURN ZERO.
    END-IF.

FOREACHPARTITION.
    PERFORM VARYING WS-ENTRY IN WS-FETCHDATA-KEYSET
        CALL FUN USING WS-ENTRY WS-FETCHDATA(WS-ENTRY)
    END-PERFORM.

GETRESPONSESIZE.
    MOVE FetchResponse-SIZEOF(WS-VERSIONID, WS-UPDATES-ENTRYITERATOR) TO WS-RESPONSESIZE.
    RETURN WS-RESPONSESIZE.

UPDATEANDGENERATERESPONSEDATA.
    PERFORM CREATE-NEW-SESSION.
    MOVE WS-CACHESHARD-MAYBECREATESESSION(WS-TIME-MILLISECONDS(), WS-ISFOLLOWER, 
        WS-UPDATES-SIZE, WS-USESTOPCIDS, WS-CREATE-NEW-SESSION) TO WS-RESPONSESESSIONID.
    MOVE FetchResponse-OF(FETCH-NONE, ZERO, WS-RESPONSESESSIONID, WS-UPDATES, WS-NODEENDPOINTS) TO WS-RESPONSE.
    RETURN WS-RESPONSE.

CREATE-NEW-SESSION.
    MOVE NEW FetchSession.CACHE-MAP(WS-UPDATES-SIZE) TO WS-CACHED-PARTITIONS.
    PERFORM VARYING WS-ENTRY IN WS-UPDATES-KEYSET
        MOVE WS-FETCHDATA(WS-ENTRY) TO WS-REQDATA
        MOVE NEW CachedPartition(WS-ENTRY, WS-REQDATA, WS-UPDATES(WS-ENTRY)) TO WS-CACHED-PARTITION
        MOVE WS-CACHED-PARTITION TO WS-CACHED-PARTITIONS
    END-PERFORM.
    RETURN WS-CACHED-PARTITIONS.

IDENTIFICATION DIVISION.
PROGRAM-ID. IncrementalFetchContext.

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-TIME USAGE IS OBJECT REFERENCE Time.
01 WS-REQMETADATA USAGE IS OBJECT REFERENCE JFetchMetadata.
01 WS-SESSION USAGE IS OBJECT REFERENCE FetchSession.
01 WS-TOPICNAMES USAGE IS OBJECT REFERENCE java.util.Map.
01 WS-LOGGER USAGE IS OBJECT REFERENCE Logger.
01 WS-PARTITION-ITERATOR USAGE IS OBJECT REFERENCE PartitionIterator.
01 WS-NEXTEPOCH PIC 9(9) COMP.

PROCEDURE DIVISION.
MAIN-PROCEDURE.
    INITIALIZE WS-TIME WS-REQMETADATA WS-SESSION WS-TOPICNAMES WS-LOGGER WS-PARTITION-ITERATOR WS-NEXTEPOCH.
    
    PERFORM GETFETCHOFFSET.
    PERFORM FOREACHPARTITION.
    PERFORM GETRESPONSESIZE.
    PERFORM UPDATEANDGENERATERESPONSEDATA.
    
    GOBACK.

GETFETCHOFFSET.
    MOVE WS-SESSION-GETFETCHOFFSET(WS-TOPICPARTITION) TO WS-FETCHOFFSET.
    RETURN WS-FETCHOFFSET.

FOREACHPARTITION.
    PERFORM WS-SESSION-SYNCHRONIZED
        PERFORM VARYING WS-PART IN WS-SESSION-PARTITIONMAP
            IF WS-SESSION-USESTOPCIDS THEN
                PERFORM WS-PART-MAYBERESOLVUNKNOWNNAME(WS-TOPICNAMES)
            END-IF
            MOVE NEW TopicIdPartition(WS-PART-TOPICID, NEW TopicPartition(WS-PART-TOPIC, WS-PART-PARTITION)) TO WS-TOPICPARTITION
            CALL FUN USING WS-TOPICPARTITION WS-PART-REQDATA
        END-PERFORM
    END-PERFORM.

GETRESPONSESIZE.
    MOVE WS-SESSION-SYNCHRONIZED
        MOVE JFetchMetadata-NEXTEPOCH(WS-REQMETADATA-EPOCH) TO WS-NEXTEPOCH
        IF WS-SESSION-EPOCH NOT = WS-NEXTEPOCH THEN
            MOVE FetchResponse-SIZEOF(WS-VERSIONID, (NEW FetchSession.RESP-MAP)-ENTRYITERATOR) TO WS-RESPONSESIZE
        ELSE
            MOVE NEW PartitionIterator(WS-UPDATES-ENTRYITERATOR, FALSE) TO WS-PARTITION-ITERATOR
            MOVE FetchResponse-SIZEOF(WS-VERSIONID, WS-PARTITION-ITERATOR) TO WS-RESPONSESIZE
        END-IF
    END-PERFORM.
    RETURN WS-RESPONSESIZE.

UPDATEANDGENERATERESPONSEDATA.
    MOVE WS-SESSION-SYNCHRONIZED
        MOVE JFetchMetadata-NEXTEPOCH(WS-REQMETADATA-EPOCH) TO WS-NEXTEPOCH
        IF WS-SESSION-EPOCH NOT = WS-NEXTEPOCH THEN
            DISPLAY "Incremental fetch session " WS-SESSION-ID " expected epoch " WS-NEXTEPOCH ", but "
                "got " WS-SESSION-EPOCH ".  Possible duplicate request."
            MOVE FetchResponse-OF(INVALID-FETCH-SESSION-EPOCH, ZERO, WS-SESSION-ID, NEW FetchSession.RESP-MAP, WS-NODEENDPOINTS) TO WS-RESPONSE
        ELSE
            MOVE NEW PartitionIterator(WS-UPDATES-ENTRYITERATOR, TRUE) TO WS-PARTITION-ITERATOR
            PERFORM UNTIL WS-PARTITION-ITERATOR-HASNEXT = FALSE
                MOVE WS-PARTITION-ITERATOR-NEXT TO WS-ENTRY
            END-PERFORM
            DISPLAY "Incremental fetch context with session id " WS-SESSION-ID " returning "
                PARTITIONS-TO-LOG-STRING(WS-UPDATES-KEYSET)
            MOVE FetchResponse-OF(FETCH-NONE, ZERO, WS-SESSION-ID, WS-UPDATES, WS-NODEENDPOINTS) TO WS-RESPONSE
        END-IF
    END-PERFORM.
    RETURN WS-RESPONSE.

GETTHROTTLEDRESPONSE.
    MOVE WS-SESSION-SYNCHRONIZED
        MOVE JFetchMetadata-NEXTEPOCH(