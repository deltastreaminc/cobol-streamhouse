IDENTIFICATION DIVISION.
PROGRAM-ID. DELAYED-SHARE-FETCH.

ENVIRONMENT DIVISION.
CONFIGURATION SECTION.
REPOSITORY.
    FUNCTION ShareFetch FROM "kafka.server.share.ShareFetch".
    FUNCTION ReplicaManager FROM "kafka.server.ReplicaManager".
    FUNCTION QuotaFactory FROM "kafka.server.QuotaFactory".
    FUNCTION FetchRequest-PartitionData FROM "org.apache.kafka.common.requests.FetchRequest".
    FUNCTION DelayedOperation FROM "org.apache.kafka.server.purgatory.DelayedOperation".
    FUNCTION LogOffsetMetadata FROM "org.apache.kafka.storage.internals.log.LogOffsetMetadata".
    FUNCTION LogOffsetSnapshot FROM "org.apache.kafka.storage.internals.log.LogOffsetSnapshot".
    FUNCTION FetchIsolation FROM "org.apache.kafka.server.storage.log.FetchIsolation".
    FUNCTION FetchPartitionData FROM "org.apache.kafka.server.storage.log.FetchPartitionData".
    FUNCTION ShareFetchUtils FROM "org.apache.kafka.server.share.ShareFetchUtils".
    FUNCTION PartitionMaxBytesStrategy FROM "org.apache.kafka.server.share.fetch.PartitionMaxBytesStrategy".
    FUNCTION Errors FROM "org.apache.kafka.common.protocol.Errors".
    FUNCTION TopicIdPartition FROM "org.apache.kafka.common.TopicIdPartition".
    FUNCTION CollectionConverters FROM "scala.jdk.javaapi.CollectionConverters".
    FUNCTION BoxedUnit FROM "scala.runtime.BoxedUnit".
    FUNCTION Tuple2 FROM "scala.Tuple2".

DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-SHAREFETCH PIC X(10) VALUE "SHAREFETCH".
01 WS-TOPICID-PARTITION.
    05 WS-TOPIC-ID PIC X(10).
    05 WS-PARTITION PIC 9(5).
01 WS-LOGREADRESULT.
    05 WS-ERROR-CODE PIC 9(5).
    05 WS-FETCH-OFFSET-METADATA PIC X(20).
01 WS-LOGREADRESULT-MAP.
    05 OCCURS 100 TIMES.
        10 WS-TOPICID-PARTITION-MAP REDEFINES WS-TOPICID-PARTITION.
        10 WS-LOGREADRESULT-ENTRY REDEFINES WS-LOGREADRESULT.
01 WS-PARTITIONMAXBYTES-MAP.
    05 OCCURS 100 TIMES.
        10 WS-TOPICID-PARTITION-MAP REDEFINES WS-TOPICID-PARTITION.
        10 WS-PARTITIONMAXBYTES PIC 9(5).
01 WS-PARTITIONSACQUIRED-MAP.
    05 OCCURS 100 TIMES.
        10 WS-TOPICID-PARTITION-MAP REDEFINES WS-TOPICID-PARTITION.
        10 WS-FETCH-OFFSET PIC 9(10).
01 WS-PARTITIONSALREADYFETCHED-MAP.
    05 OCCURS 100 TIMES.
        10 WS-TOPICID-PARTITION-MAP REDEFINES WS-TOPICID-PARTITION.
        10 WS-LOGREADRESULT-ENTRY REDEFINES WS-LOGREADRESULT.
01 WS-SHAREPARTITIONS-MAP.
    05 OCCURS 100 TIMES.
        10 WS-TOPICID-PARTITION-MAP REDEFINES WS-TOPICID-PARTITION.
        10 WS-SHAREPART PIC X(10).

PROCEDURE DIVISION.

DELAYED-SHARE-FETCH-PARAGRAPH.
    PERFORM DELAYED-SHARE-FETCH-ONEXPIRATION.
    PERFORM DELAYED-SHARE-FETCH-ONCOMPLETE.
    PERFORM DELAYED-SHARE-FETCH-RETRYCOMPLETE.
    PERFORM DELAYED-SHARE-FETCH-COMPLETERESULT.
    PERFORM DELAYED-SHARE-FETCH-HANDLEEXCEPTION.
    PERFORM DELAYED-SHARE-FETCH-COMBINELOGREADRESPONSE.
    PERFORM DELAYED-SHARE-FETCH-RELEASEPARTITIONLOCKS.

DELAYED-SHARE-FETCH-ONEXPIRATION.
    CONTINUE.

DELAYED-SHARE-FETCH-ONCOMPLETE.
    LOCK.
    PERFORM READ-FROM-LOG.
    UNLOCK.
    PERFORM COMPLETE-SHAREFETCH-REQUEST.

DELAYED-SHARE-FETCH-RETRYCOMPLETE.
    PERFORM ACQUIRE-PARTITIONS.
    IF WS-PARTITIONSACQUIRED-MAP NOT EMPTY
        PERFORM UPDATE-FETCH-OFFSET-METADATA
        PERFORM TRY-COMPLETE
    ELSE
        PERFORM FORCE-COMPLETE.

DELAYED-SHARE-FETCH-COMPLETERESULT.
    PERFORM COMPLETE-SHARE-FETCH-REQUEST.

DELAYED-SHARE-FETCH-HANDLEEXCEPTION.
    PERFORM HANDLE-FETCH-EXCEPTION.

DELAYED-SHARE-FETCH-COMBINELOGREADRESPONSE.
    PERFORM COMBINE-LOG-READ-RESPONSE.

DELAYED-SHARE-FETCH-RELEASEPARTITIONLOCKS.
    PERFORM RELEASE-PARTITION-LOCKS.

ACQUIRE-PARTITIONS.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100
        IF WS-SHAREPART(I) NOT = SPACES
            PERFORM ACQUIRE-PARTITION
    END-PERFORM.

ACQUIRE-PARTITION.
    IF WS-SHAREPART(I) CAN-ACQUIRE-RECORDS
        MOVE WS-TOPICID-PARTITION-MAP(I) TO WS-PARTITIONSACQUIRED-MAP(I)
        MOVE WS-FETCH-OFFSET(I) TO WS-PARTITIONSACQUIRED-MAP(I)
    ELSE
        MOVE SPACES TO WS-SHAREPART(I)
        RELEASE FETCH LOCK FOR WS-SHAREPART(I).

UPDATE-FETCH-OFFSET-METADATA.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100
        IF WS-TOPICID-PARTITION-MAP(I) IN WS-PARTITIONSACQUIRED-MAP
            PERFORM GET-FETCH-OFFSET-METADATA
            MOVE WS-FETCH-OFFSET-METADATA TO WS-LOGREADRESULT-ENTRY(I)
    END-PERFORM.

GET-FETCH-OFFSET-METADATA.
    MOVE WS-TOPICID-PARTITION-MAP(I) TO WS-TOPICID-PARTITION.
    CALL "endOffsetMetadataForTopicPartition" USING WS-TOPICID-PARTITION
        RETURNING WS-FETCH-OFFSET-METADATA.

TRY-COMPLETE.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100
        IF WS-TOPICID-PARTITION-MAP(I) IN WS-PARTITIONSACQUIRED-MAP
            IF WS-ERROR-CODE(I) NOT = ZERO
                PERFORM FORCE-COMPLETE
                RELEASE FETCH LOCK FOR WS-SHAREPART(I)
                PERFORM COMPLETE-DELAYED-SHAREFETCH-REQUEST
            ELSE
                IF MINBYTES-SATISFIED(WS-PARTITIONSACQUIRED-MAP, WS-PARTITIONMAXBYTES-MAP)
                    MOVE WS-PARTITIONSACQUIRED-MAP TO WS-PARTITIONSALREADYFETCHED-MAP
                    PERFORM FORCE-COMPLETE
                    RELEASE FETCH LOCK FOR WS-SHAREPART(I)
                    PERFORM COMPLETE-DELAYED-SHAREFETCH-REQUEST
                ELSE
                    RELEASE FETCH LOCK FOR WS-SHAREPART(I).

FORCE-COMPLETE.
    CALL "forceComplete" OF DelayedOperation.

COMPLETE-DELAYED-SHAREFETCH-REQUEST.
    CALL "completeDelayedShareFetchRequest" OF ReplicaManager
        USING WS-TOPICID-PARTITION-MAP(I).

READ-FROM-LOG.
    CALL "readFromLog" OF ReplicaManager
        USING WS-SHAREFETCH, WS-PARTITIONSACQUIRED-MAP, WS-PARTITIONMAXBYTES-MAP
        RETURNING WS-LOGREADRESULT-MAP.

COMPLETE-SHARE-FETCH-REQUEST.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100
        IF WS-LOGREADRESULT-ENTRY(I) NOT = SPACES
            MOVE WS-TOPICID-PARTITION-MAP(I) TO WS-TOPICID-PARTITION
            MOVE WS-LOGREADRESULT-ENTRY(I) TO WS-FETCHPARTITION-DATA
            CALL "processFetchResponse" OF ShareFetchUtils
                USING WS-SHAREFETCH, WS-FETCHPARTITION-DATA, WS-SHAREPARTITIONS-MAP,
                      ReplicaManager, ExceptionHandler
    END-PERFORM.

HANDLE-FETCH-EXCEPTION.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100
        IF WS-TOPICID-PARTITION-MAP(I) IN WS-PARTITIONSACQUIRED-MAP
            CALL ExceptionHandler USING WS-TOPICID-PARTITION-MAP(I), EXCEPTION-OBJ
    CALL "maybeCompleteWithException" OF WS-SHAREFETCH
        USING WS-PARTITIONSACQUIRED-MAP, EXCEPTION-OBJ.

COMBINE-LOG-READ-RESPONSE.
    MOVE SPACES TO WS-LOGREADRESULT-MAP.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100
        IF WS-TOPICID-PARTITION-MAP(I) IN WS-PARTITIONSACQUIRED-MAP
            AND WS-TOPICID-PARTITION-MAP(I) NOT IN WS-PARTITIONSALREADYFETCHED-MAP
                MOVE WS-TOPICID-PARTITION-MAP(I) TO WS-TOPICID-PARTITION-MAP(I)
                MOVE WS-FETCH-OFFSET(I) TO WS-FETCH-OFFSET(I)
                PERFORM READ-FROM-LOG
                MOVE WS-LOGREADRESULT-MAP TO WS-PARTITIONSALREADYFETCHED-MAP.

RELEASE-PARTITION-LOCKS.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100
        IF WS-SHAREPART(I) NOT = SPACES
            RELEASE FETCH LOCK FOR WS-SHAREPART(I).

MINBYTES-SATISFIED(PARTITIONSACQUIRED, PARTITIONMAXBYTES) RETURNING FLAG.
    MOVE ZERO TO WS-ACCUM-SIZE.
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > 100
        IF WS-TOPICID-PARTITION-MAP(I) IN PARTITIONSACQUIRED
            PERFORM GET-FETCH-OFFSET-METADATA
            IF WS-FETCH-OFFSET-METADATA NOT = UNKNOWN-OFFSET-METADATA
                ADD WS-PARTITIONMAXBYTES(I) TO WS-ACCUM-SIZE
    IF WS-ACCUM-SIZE >= WS-SHAREFETCH-MINBYTES
        MOVE 1 TO FLAG
    ELSE
        MOVE 0 TO FLAG.

END PROGRAM DELAYED-SHARE-FETCH.